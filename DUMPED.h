struct TCB {
  long status;
  long mode;
  unsigned long reg[40];
  long system[6];
};
struct EXEC {
  unsigned long pc0;
  unsigned long gp0;
  unsigned long t_addr;
  unsigned long t_size;
  unsigned long d_addr;
  unsigned long d_size;
  unsigned long b_addr;
  unsigned long b_size;
  unsigned long s_addr;
  unsigned long s_size;
  unsigned long sp;
  unsigned long fp;
  unsigned long gp;
  unsigned long ret;
  unsigned long base;
};
struct DIRENTRY {
  char name[20];
  long attr;
  long size;
  struct DIRENTRY* next;
  long head;
  char system[4];
};
struct MATRIX {
  short m[3][3];
  long t[3];
};
struct VECTOR {
  long vx;
  long vy;
  long vz;
  long pad;
};
struct SVECTOR {
  signed short vx;
  signed short vy;
  signed short vz;
  signed short pad;
};
struct CVECTOR {
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char cd;
};
struct DVECTOR {
  signed short vx;
  signed short vy;
};
struct RVECTOR {
  struct SVECTOR v;
  void* uv[2];
  unsigned short pad;
  struct CVECTOR c;
  struct DVECTOR sxy;
  unsigned long sz;
};
struct CRVECTOR3 {
  struct RVECTOR r01;
  struct RVECTOR r12;
  struct RVECTOR r20;
  struct RVECTOR* r0;
  struct RVECTOR* r1;
  struct RVECTOR* r2;
  unsigned long* rtn;
};
struct CRVECTOR4 {
  struct RVECTOR r01;
  struct RVECTOR r02;
  struct RVECTOR r31;
  struct RVECTOR r32;
  struct RVECTOR rc;
  struct RVECTOR* r0;
  struct RVECTOR* r1;
  struct RVECTOR* r2;
  struct RVECTOR* r3;
  unsigned long* rtn;
};
struct RECT {
  signed short x;
  signed short y;
  signed short w;
  signed short h;
};
struct DR_ENV {
  unsigned long tag;
  unsigned long code[15];
};
struct P_TAG {
  signed char addr;
  signed char len;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
};
struct CdlLOC {
  unsigned char minute;
  unsigned char second;
  unsigned char sector;
  unsigned char track;
};
struct LightInstance {
  struct _Instance* lightInstance;
  long r;
  long g;
  long b;
  signed short radius;
  unsigned char segment;
  unsigned char flags;
};
struct _Instance {
  struct NodeType node;
  struct _Instance* next;
  struct _Instance* prev;
  long instanceID;
  long flags;
  long flags2;
  struct Object* object;
  struct Intro* intro;
  va_list data;
  va_list introData;
  struct _Instance* parent;
  long introNum;
  long birthStreamUnitID;
  long currentStreamUnitID;
  long introUniqueID;
  struct MATRIX* matrix;
  struct MATRIX* oldMatrix;
  struct SoundInstance soundInstanceTbl[4];
  unsigned long maxCheckDistance;
  unsigned long checkMask;
  struct _Position position;
  unsigned char lightGroup;
  struct _Position oldPos;
  unsigned char spectralLightGroup;
  signed short currentTextureAnimFrame;
  struct _Position initialPos;
  struct _Rotation rotation;
  struct _Rotation oldRotation;
  struct _SVector scale;
  long attachedID;
  long attachedSegment;
  struct MATRIX relativeMatrix;
  struct _TFace* tface;
  struct _TFace* oldTFace;
  va_list tfaceLevel;
  va_list collideInfo;
  long bspTree;
  signed short cachedTFace;
  signed short cachedBSPTree;
  struct _Normal oldWNormal;
  struct _Normal wNormal;
  struct _SVector offset;
  va_list dsignal;
  va_list shadow0;
  va_list shadow1;
  va_list extraLight;
  struct _Position extraLightDir;
  signed short extraLightScale;
  struct _HModel* hModelList;
  signed short fadeValue;
  signed short lightMatrix;
  voidFnPtr processFunc;
  voidFnPtr collideFunc;
  voidFnPtr additionalCollideFunc;
  va_list additionalDrawFunc;
  tp159 queryFunc;
  voidFnPtr messageFunc;
  struct _Position shadowPosition;
  signed short currentModel;
  struct _TFace* waterFace;
  struct _TFace* oldWaterFace;
  struct _Terrain* waterFaceTerrain;
  struct _PlaneConstants halvePlane;
  struct _SVector splitPoint;
  struct _Instance* LinkParent;
  struct _Instance* LinkChild;
  struct _Instance* LinkSibling;
  long ParentLinkNode;
  va_list InstanceState;
  char introName[16];
  va_list extraData;
  signed short constrictAngle;
  signed short petrifyValue;
  long xVel;
  long yVel;
  long zVel;
  long xAccl;
  long yAccl;
  long zAccl;
  long maxXVel;
  long maxYVel;
  long maxZVel;
  long currentMainState;
  long currentSubState;
  long work0;
  long work1;
  long work2;
  long work3;
  long work4;
  long work5;
  long work6;
  long work7;
  long work8;
  long work9;
  struct _G2Anim_Type anim;
  tp154 rebuildCallback;
  signed short splineFlags;
  signed short targetFrame;
  signed short clipBeg;
  signed short clipEnd;
  struct EventAliasCommandStruct aliasCommand;
  long light_color;
  struct CVECTOR* perVertexColor;
};
struct _GameTrackerASMData_Type {
  long drawBackFaces;
  long dispPage;
  signed short MorphTime;
  signed short MorphType;
  struct LightInstance lightInstances[1];
};
struct _GameData_Type {
  struct _GameTrackerASMData_Type asmData;
};
struct NodeType {
  struct NodeType* prev;
  struct NodeType* next;
};
struct TextureFT3 {
  unsigned char u0;
  unsigned char v0;
  unsigned short clut;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  unsigned char u2;
  unsigned char v2;
  unsigned short attr;
};
struct TextureMT3 {
  unsigned char u0;
  unsigned char v0;
  unsigned short clut;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  unsigned char u2;
  unsigned char v2;
  signed char pad1;
  signed char sortPush;
  long color;
};
struct AniTexInfo {
  struct TextureMT3* texture;
  long numFrames;
  long speed;
};
struct AniTex {
  long numAniTextues;
  struct AniTexInfo aniTexInfo;
};
struct DrMoveAniTexSrcInfo {
  signed short pixSrcX;
  signed short pixSrcY;
  signed short clutSrcX;
  signed short clutSrcY;
};
struct DrMoveAniTexDestInfo {
  signed short pixDstX;
  signed short pixDstY;
  signed short pixW;
  signed short pixH;
  signed short clutDstX;
  signed short clutDstY;
  signed short clutW;
  signed short clutH;
  signed short pixCurrentX;
  signed short pixCurrentY;
  signed short clutCurrentX;
  signed short clutCurrentY;
  long numFrames;
  long speed;
  struct DrMoveAniTexSrcInfo frame;
};
struct DrMoveAniTex {
  long numAniTextues;
  struct DrMoveAniTexDestInfo* aniTexInfo;
};
struct MemHeader {
  unsigned short magicNumber;
  unsigned char memStatus;
  unsigned char memType;
  unsigned long memSize;
};
struct _G2SVector3_Type {
  signed short x;
  signed short y;
  signed short z;
};
struct _G2LVector3_Type {
  long x;
  long y;
  long z;
};
struct _G2Matrix_Type {
  short rotScale[3][3];
  signed short scaleFlag;
  struct _G2LVector3_Type trans;
};
struct _G2Quat_Type {
  signed short x;
  signed short y;
  signed short z;
  signed short w;
};
struct _G2AnimQuatInfo_Type {
  struct _G2Quat_Type srcQuat;
  struct _G2Quat_Type destQuat;
  struct _G2SVector3_Type srcScale;
  struct _G2SVector3_Type destScale;
  struct _G2SVector3_Type srcTrans;
  struct _G2SVector3_Type destTrans;
};
struct _G2AnimAlphaTable_Type {
  unsigned short size;
  long data[0];
};
struct _G2AnimInterpStateBlock_Type {
  struct _G2AnimInterpStateBlock_Type* next;
  struct _G2AnimQuatInfo_Type quatInfo[4];
};
struct _G2AnimInterpInfo_Type {
  signed short duration;
  signed short targetTime;
  struct _G2AnimAlphaTable_Type* alphaTable;
  struct _G2AnimInterpStateBlock_Type* stateBlockList;
};
struct _G2AnimChanStatus_Type {
  signed short keyData;
  signed short index;
};
struct _G2AnimChanStatusBlock_Type {
  struct _G2AnimChanStatusBlock_Type* next;
  struct _G2AnimChanStatus_Type chunks[8];
};
struct _G2AnimFxHeader_Type {
  unsigned char sizeAndSection;
  signed char type;
  unsigned short keyframeID;
};
struct _G2AnimKeylist_Type {
  unsigned char sectionCount;
  unsigned char s0TailTime;
  unsigned char s1TailTime;
  unsigned char s2TailTime;
  unsigned short keyCount;
  signed short timePerKey;
  unsigned short pad00;
  signed short pad01;
  unsigned short pad10;
  signed short pad11;
  struct _G2AnimFxHeader_Type* fxList;
  tp125 sectionData[0];
};
struct _G2AnimSection_Type {
  unsigned char flags;
  unsigned char sectionID;
  unsigned char firstSeg;
  unsigned char segCount;
  signed short elapsedTime;
  signed short storedTime;
  signed short loopStartTime;
  signed short loopEndTime;
  tp19 swAlarmTable;
  long speedAdjustment;
  unsigned short keylistID;
  unsigned long alarmFlags;
  tp149 callback;
  va_list callbackData;
  struct _G2AnimKeylist_Type* keylist;
  struct _G2AnimChanStatusBlock_Type* chanStatusBlockList;
  struct _G2AnimInterpInfo_Type* interpInfo;
};
struct _G2Anim_Type {
  unsigned char sectionCount;
  unsigned char masterSection;
  unsigned short controllerList;
  unsigned short disabledControllerList;
  unsigned short pad;
  struct _G2SVector3_Type rootTrans;
  unsigned short flags;
  struct _Model* modelData;
  struct _G2Matrix_Type* segMatrices;
  unsigned long disabledBits[3];
  struct _G2AnimSection_Type section[3];
};
struct _Model {
  long numVertices;
  struct _MVertex* vertexList;
  long numNormals;
  struct _SVectorNoPad* normalList;
  long numFaces;
  struct _MFace* faceList;
  long numSegments;
  struct _Segment* segmentList;
  struct AniTex* aniTextures;
  signed short maxRad;
  signed short pad;
  long maxRadSq;
  struct MultiSpline* multiSpline;
  struct TextureMT3* startTextures;
  struct TextureMT3* endTextures;
};
struct _SVector {
  signed short x;
  signed short y;
  signed short z;
  signed short pad;
};
struct _SVectorNoPad {
  signed short x;
  signed short y;
  signed short z;
};
struct _Position {
  signed short x;
  signed short y;
  signed short z;
};
struct _Rotation {
  signed short x;
  signed short y;
  signed short z;
  signed short pad;
};
struct _Normal {
  signed short x;
  signed short y;
  signed short z;
  signed short pad;
};
struct _PlaneConstants {
  signed short a;
  signed short b;
  signed short c;
  signed short flags;
  long d;
};
struct _Vertex {
  signed short x;
  signed short y;
  signed short z;
};
struct _Face {
  unsigned short v0;
  unsigned short v1;
  unsigned short v2;
};
struct _MVertex {
  struct _Vertex vertex;
  unsigned short normal;
};
struct _MFace {
  struct _Face face;
  unsigned char normal;
  unsigned char flags;
  long color;
};
struct _RGBAColor {
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char a;
};
struct _PVertex {
  signed short x;
  signed short y;
  long otz;
};
struct _VertexPool {
  struct _PVertex vertex[528];
  struct CVECTOR color[528];
};
struct _PrimPool {
  long numPrims;
  unsigned long* nextPrim;
  unsigned long* lastPrim;
  unsigned long prim[24000];
};
struct _Sphere {
  struct _Position position;
  unsigned short radius;
  unsigned long radiusSquared;
};
struct _Sphere_noSq {
  struct _Position position;
  unsigned short radius;
};
struct _CameraKey {
  signed short x;
  signed short y;
  signed short z;
  signed short id;
  signed short rx;
  signed short ry;
  signed short rz;
  signed short flags;
  signed short tx;
  signed short ty;
  signed short tz;
  signed short pad;
};
struct Object {
  long oflags;
  signed short id;
  signed short sfxFileHandle;
  signed short numModels;
  signed short numAnims;
  tp88 modelList;
  tp88 animList;
  signed short introDist;
  signed short vvIntroDist;
  signed short removeDist;
  signed short vvRemoveDist;
  va_list data;
  versionID script;
  versionID name;
  tp28 soundData;
  long oflags2;
  signed short sectionA;
  signed short sectionB;
  signed short sectionC;
  signed short numberOfEffects;
  struct ObjectEffect* effectList;
  unsigned long* relocList;
  va_list relocModule;
  struct VramSize vramSize;
};
struct _BVertex {
  signed short x;
  signed short y;
  signed short z;
  signed short pad;
};
struct _BFace {
  signed short v0;
  signed short v1;
  signed short v2;
  signed short pad;
  struct TextureFT3* texture;
};
struct _BGObject {
  signed short flags;
  signed short numFaces;
  struct _BVertex* vertexList;
  struct _BFace* faceList;
  signed short x;
  signed short y;
  signed short z;
  signed short radius;
  long numVertices;
};
struct Signal {
  long id;
};
struct _MultiSignal {
  long numSignals;
  signed short signalNum;
  signed short flags;
  struct Signal signalList[32];
};
struct _HFace {
  signed short v0;
  signed short v1;
  signed short v2;
  unsigned char attr;
  signed char pad;
  unsigned short normal;
  unsigned short n0;
};
struct _HSphere {
  long attr;
  unsigned char id;
  unsigned char rank;
  signed short pad;
  struct _Position position;
  unsigned short radius;
  unsigned long radiusSquared;
};
struct _HBox {
  signed short flags;
  unsigned char id;
  unsigned char rank;
  signed short minX;
  signed short minY;
  signed short minZ;
  signed short maxX;
  signed short maxY;
  signed short maxZ;
  signed short refMinX;
  signed short refMinY;
  signed short refMinZ;
  signed short refMaxX;
  signed short refMaxY;
  signed short refMaxZ;
};
struct _HPrim {
  unsigned char hpFlags;
  unsigned char withFlags;
  unsigned char type;
  unsigned char segment;
};
struct _HModel {
  struct _HPrim* hPrimList;
  long numHPrims;
};
struct _HInfo {
  long numHFaces;
  struct _HFace* hfaceList;
  long numHSpheres;
  struct _HSphere* hsphereList;
  long numHBoxes;
  struct _HBox* hboxList;
};
struct _Segment {
  long flags;
  signed short firstTri;
  signed short lastTri;
  signed short firstVertex;
  signed short lastVertex;
  signed short px;
  signed short py;
  signed short pz;
  signed short parent;
  struct _HInfo* hInfo;
};
struct MultiSpline {
  struct Spline* positional;
  struct RSpline* rotational;
  struct Spline* scaling;
  struct Spline* color;
  struct SplineDef curPositional;
  struct SplineDef curRotational;
  struct SplineDef curScaling;
  struct SplineDef curColor;
  struct MATRIX curRotMatrix;
};
struct SoundInstance {
  unsigned char channel;
  unsigned char state;
  unsigned char delay;
};
struct ObjectEffect {
  unsigned char effectNumber;
  void* modifierList[3];
};
struct VramSize {
  signed short x;
  signed short y;
  signed short w;
  signed short h;
};
struct _TFace {
  struct _Face face;
  unsigned char attr;
  signed char sortPush;
  unsigned short normal;
  unsigned short textoff;
};
struct _TVertex {
  struct _Vertex vertex;
  unsigned short rgb15;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
};
struct EventAliasCommandStruct {
  struct _Instance* hostInstance;
  signed short newanim;
  signed short newframe;
  signed short interpframes;
  signed short speed;
};
struct Intro {
  char name[16];
  long intronum;
  long UniqueID;
  struct _Rotation rotation;
  struct _Position position;
  signed short maxRad;
  long maxRadSq;
  long flags;
  va_list data;
  struct _Instance* instance;
  struct MultiSpline* multiSpline;
  va_list dsignal;
  signed short specturalLightGroup;
  signed short meshColor;
  struct _Position spectralPosition;
  signed short spad;
};
struct _Terrain {
  signed short UnitChangeFlags;
  signed short spad;
  long lpad2;
  long numIntros;
  struct Intro* introList;
  long numVertices;
  long numFaces;
  long numNormals;
  struct _TVertex* vertexList;
  struct _TFace* faceList;
  struct _Normal* normalList;
  struct DrMoveAniTex* aniList;
  struct _BSPNode* sbspRoot;
  va_list StreamUnits;
  struct TextureFT3* StartTextureList;
  struct TextureFT3* EndTextureList;
  struct _SBSPLeaf* sbspStartLeaves;
  struct _SBSPLeaf* sbspEndLeaves;
  struct _MorphVertex* MorphDiffList;
  struct _MorphColor* MorphColorList;
  long numBSPTrees;
  struct BSPTree* BSPTreeArray;
  tp19 morphNormalIdx;
  struct _MultiSignal* signals;
};
struct _InstancePool {
  long nextInstanceID;
  long numFreeInstances;
  struct _Instance instance[60];
  struct _Instance* first_free;
};
struct _InstanceList {
  long numInstances;
  struct _Instance* first;
  struct _InstancePool* pool;
  struct NodeType group[32];
};
struct _ObjectTracker {
  char name[16];
  struct Object* object;
  signed short objectStatus;
  signed short numInUse;
  va_list vramBlock;
  signed char numObjectsUsing;
  char objectsUsing[7];
};
struct _BoundingBox {
  signed short minX;
  signed short minY;
  signed short minZ;
  signed short maxX;
  signed short maxY;
  signed short maxZ;
};
struct CDLight {
  struct NodeType node;
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char flags;
  struct _Sphere sphere;
};
struct _BSPNode {
  struct _Sphere_noSq sphere;
  signed short a;
  signed short b;
  signed short c;
  signed short flags;
  long d;
  va_list front;
  va_list back;
  struct _Sphere_noSq spectralSphere;
  signed short front_spectral_error;
  signed short back_spectral_error;
  signed short front_material_error;
  signed short back_material_error;
};
struct _BSPLeaf {
  struct _Sphere_noSq sphere;
  struct _TFace* faceList;
  signed short numFaces;
  signed short flags;
  struct _BoundingBox box;
  struct _BoundingBox spectralBox;
  struct _Sphere_noSq spectralSphere;
};
struct _SBSPLeaf {
  struct _Sphere_noSq sphere;
  tp88 introList;
  signed short numIntros;
  signed short flags;
  tp88 lightList;
  signed short numLights;
  signed short pad;
};
struct _MorphVertex {
  signed short x;
  signed short y;
  signed short z;
  signed short vindex;
  signed short hx;
  signed short hy;
  signed short hz;
};
struct _MorphColor {
  signed short morphColor15;
};
struct Level {
  struct _Terrain* terrain;
  struct LightList* lightList;
  long numVMObjects;
  struct _VMObject* vmobjectList;
  long numSpotLights;
  struct SpotLight* spotLightList;
  long numPointLights;
  struct PointLight* pointLightList;
  long numSpotSpecturalLights;
  struct SpotLight* spotSpecturalLightList;
  long numPointSpecturalLights;
  struct PointLight* pointSpecturalLightList;
  long numBGObjects;
  struct _BGObject* bgObjectList;
  long waterZLevel;
  unsigned char backColorR;
  unsigned char backColorG;
  unsigned char backColorB;
  unsigned char cpad1;
  unsigned char specturalColorR;
  unsigned char specturalColorG;
  unsigned char specturalColorB;
  unsigned char cpad2;
  unsigned short fogFar;
  unsigned short fogNear;
  unsigned short spectralFogFar;
  unsigned short spectralFogNear;
  unsigned short waterFogFar;
  unsigned short waterFogNear;
  long depthQBlendStart;
  struct LightList* spectrallightList;
  long numCameras;
  va_list cameraList;
  long bspPlaneError;
  long numVGroups;
  struct _VGroup* vGroupList;
  long deathZ;
  long flags;
  struct _MultiSignal* startSignal;
  long numIntros;
  struct Intro* introList;
  struct DrMoveAniTex* bgAniList;
  long numHotSpots;
  struct _HotSpot* hotSpotList;
  va_list objectNameList;
  long depthQFogStart;
  long morphLastStep;
  versionID worldName;
  struct VramSize vramSize;
  unsigned short holdFogFar;
  unsigned short holdFogNear;
  long numberEnemyUnits;
  tp82 enemyUnitsNames;
  tp85 timesSignalList;
  struct _MultiSignal* spectralSignal;
  struct _MultiSignal* materialSignal;
  struct _MultiSignal* startUnitLoadedSignal;
  struct _MultiSignal* startUnitMainSignal;
  struct _MultiSignal* startGoingIntoWaterSignal;
  struct _MultiSignal* startGoingOutOfWaterSignal;
  long unitFlags;
  struct _MultiSignal* SignalListStart;
  struct _MultiSignal* SignalListEnd;
  long numBSPLeaves;
  struct EventPointers* PuzzleInstances;
  long NumberOfPlanMarkers;
  struct _PlanMkr* PlanMarkerList;
  long NumberOfSFXMarkers;
  struct _SFXMkr* SFXMarkerList;
  unsigned long versionNumber;
  versionID dynamicMusicName;
  long streamUnitID;
  struct TClassAttr tClassAttr[16];
  short TODLighting[4][3];
  tp252 TODbackColor[4][3];
  tp253 TODfogNearFar[4][2];
  signed short TODRedScale;
  signed short TODGrnScale;
  signed short TODBluScale;
  signed short TODfogNear;
  signed short TODfogFar;
  signed short short_pad;
  unsigned char TODbackColorR;
  unsigned char TODbackColorG;
  unsigned char TODbackColorB;
  unsigned char cpad3;
  struct LightGroup* razielLightGroup;
  struct LightGroup* razielSpectralLightGroup;
};
struct _SavedCinematic {
  struct _Position position;
  struct _Position focusPoint;
  struct _Position base;
  struct _Position targetPos;
  struct _Position targetFocusPoint;
  struct _Position targetBase;
  struct _Rotation baseRot;
  struct _Rotation focusRotation;
  struct _Rotation targetFocusRotation;
  signed short focusDistance;
  signed short targetFocusDistance;
  struct _SVector focusPointVel;
  struct _SVector focusPointAccl;
  struct _SVector baseVel;
  struct _SVector baseAccl;
  long maxVel;
  struct MultiSpline* posSpline;
  struct MultiSpline* targetSpline;
  struct Level* level;
};
struct BSPTree {
  struct _BSPNode* bspRoot;
  struct _BSPLeaf* startLeaves;
  struct _BSPLeaf* endLeaves;
  struct _Position globalOffset;
  signed short flags;
  struct _Position localOffset;
  signed short ID;
  long splineID;
  struct _Instance* instanceSpline;
};
struct LightGroup {
  struct MATRIX lightMatrix;
  struct MATRIX colorMatrix;
};
struct LightList {
  struct CVECTOR ambient;
  long numLightGroups;
  struct LightGroup* lightGroupList;
};
struct PointLight {
  struct NodeType node;
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char flags;
  struct _Position position;
  signed short radius;
  long radiusSquared;
};
struct SpotLight {
  struct NodeType node;
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char flags;
  struct _Position centroid;
  signed short radius;
  long radiusSquared;
  struct _Position position;
  struct _Position direction;
  signed short cosFalloffAngle;
  signed short attenuationScale;
};
struct LightInfo {
  long numPointLights;
  struct PointLight pointLightPool[32];
  struct NodeType usedPointLightList;
  struct NodeType freePointLightList;
  struct NodeType activePointLightList;
  long numSpotLights;
  struct SpotLight spotLightPool[8];
  struct NodeType usedSpotLightList;
  struct NodeType freeSpotLightList;
  struct NodeType activeSpotLightList;
  long numSavedColors;
};
struct _VMOffset {
  signed short dx;
  signed short dy;
  signed short dz;
};
struct _VMColorOffset {
  signed char dr;
  signed char dg;
  signed char db;
};
struct _VMInterpolated {
  signed short tvIdx;
  signed short startIdx;
  signed short endIdx;
  signed short time;
};
struct _VMOffsetTable {
  long numVMOffsets;
};
struct _VMObject {
  unsigned short flags;
  signed short bspIdx;
  signed short materialIdx;
  signed short spectralIdx;
  signed short currentIdx;
  signed short timeScale;
  long timer;
  struct _Position position;
  signed short radius;
  long radiusSquared;
  long numVMOffsetTables;
  tp88 vmoffsetTableList;
  struct _VMOffsetTable* curVMOffsetTable;
  long numVMVertices;
  va_list vmvertexList;
  long numVMInterpolated;
  struct _VMInterpolated* vminterpolatedList;
  versionID name;
};
struct _VGroup {
  long id;
  long numVertices;
  tp88 vertexList;
};
struct _HotSpot {
  signed short x;
  signed short y;
  signed short z;
  signed short id;
};
struct _PlanMkr {
  struct _Position pos;
  signed short id;
};
struct _SFXMkr {
  tp28 soundData;
  long uniqueID;
  struct SoundInstance sfxTbl[4];
  struct _Position pos;
  signed short pad;
  long livesInOnePlace;
  long inSpectral;
};
struct TClassAttr {
  signed short flags;
  unsigned short sound;
};
struct _ColorType {
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char code;
};
struct _CameraCore_Type {
  struct _Position position;
  signed short pad1;
  struct MATRIX vvNormalWorVecMat[2];
  long vvPlaneConsts[6];
  struct MATRIX* wcTransform;
  long farPlane;
  long projDistance;
  long nearPlane;
  struct MATRIX* wcTransform2;
  struct MATRIX* cwTransform2;
  struct _Normal viewVolumeNormal[5];
  unsigned int leftX;
  unsigned int rightX;
  unsigned int topY;
  unsigned int bottomY;
  struct _Rotation rotation;
  signed short pad2;
  struct _SVector screenScale;
  signed short pad3;
  struct _Position debugPos;
  signed short pad4;
  struct _Rotation debugRot;
  signed short pad5;
  struct _Position nondebugPos;
  signed short pad6;
};
struct SpuVolume {
  signed short left;
  signed short right;
};
struct SpuExtAttr {
  struct SpuVolume volume;
  long reverb;
  long mix;
};
struct SpuStVoiceAttr {
  signed char status;
  signed char pad1;
  signed char pad2;
  signed char pad3;
  long last_size;
  unsigned long buf_addr;
  unsigned long data_addr;
};
struct AadSoundBankHdr {
  unsigned long bankID;
  unsigned long headerSize;
  unsigned short bankVersion;
  unsigned char numBanks;
  unsigned char numPrograms;
  unsigned short numTones;
  unsigned short numWaves;
  unsigned char numSequences;
  unsigned char numPitchMaps;
  unsigned short numLabels;
  unsigned char reverbMode;
  unsigned char unused1;
  signed short reverbDepth;
  unsigned short objectID;
  unsigned short unused2;
  unsigned long unused3;
  unsigned long unused4;
  unsigned long unused5;
  unsigned long unused6;
  unsigned long unused7;
  unsigned long unused8;
  unsigned long unused9;
  unsigned long unused10;
  unsigned long unused11;
  unsigned long unused12;
  unsigned long unused13;
  unsigned long unused14;
  unsigned long unused15;
  void* baseProgramTbl[16];
  tp61 baseToneTbl[16];
};
struct AadProgramAtr {
  unsigned short numTones;
  unsigned short firstTone;
  unsigned char volume;
  unsigned char panPosition;
  unsigned short unused;
};
struct AadToneAtr {
  unsigned char priority;
  unsigned char parentProgram;
  unsigned char volume;
  unsigned char panPosition;
  unsigned char centerNote;
  signed char centerFine;
  unsigned char minNote;
  unsigned char maxNote;
  unsigned char mode;
  unsigned char pitchBendMax;
  unsigned short adsr1;
  unsigned short adsr2;
  signed short waveIndex;
};
struct _AadDynSfxFileHdr {
  unsigned long snfID;
  unsigned short snfVersion;
  unsigned short uniqueID;
  unsigned short handle;
  unsigned short numSfxInFile;
  struct _AadDynSfxFileHdr* prevDynSfxFile;
  struct _AadDynSfxFileHdr* nextDynSfxFile;
};
struct AadDynSfxAttr {
  unsigned short sfxID;
  unsigned short waveID;
  struct AadToneAtr toneAttr;
  unsigned long waveSize;
};
struct AadTempoCounter {
  unsigned long currentTick;
  unsigned long currentError;
  unsigned long tickTimeFixed;
  unsigned long errorPerUpdate;
  unsigned short ticksPerUpdate;
  unsigned short ppqn;
  unsigned long quarterNoteTime;
};
struct AadSeqEvent {
  unsigned long deltaTime;
  unsigned char track;
  unsigned char statusByte;
  char dataByte[6];
};
struct _AadSequenceSlot {
  struct AadTempoCounter tempo;
  tp248 eventQueue[4][16];
  void* eventIn[16];
  void* eventOut[16];
  void* eventsInQueue[16];
  tp124 sequencePosition[16];
  unsigned long lastEventExecutedTime[16];
  void* runningStatus[16];
  void* trackFlags[16];
  tp508 loopSequencePosition[4][16];
  void* loopCurrentNestLevel[16];
  tp252 loopCounter[4][16];
  struct _AadSequenceSlot* selectedSlotPtr;
  unsigned char selectedSlotNum;
  unsigned char selectedChannel;
  unsigned char sequenceNumberAssigned;
  unsigned char thisSlotNumber;
  unsigned short status;
  unsigned short channelMute;
  unsigned short enableSustainUpdate;
  unsigned short ignoreTranspose;
  unsigned char slotFlags;
  unsigned char slotID;
  unsigned char slotVolume;
  unsigned char slotPan;
  tp28 masterVolPtr;
  unsigned char selectedDynamicBank;
  unsigned char sequenceAssignedDynamicBank;
  unsigned short unused1;
  void* currentDynamicBank[16];
  tp61 pitchWheel[16];
  void* currentProgram[16];
  void* baseProgram[16];
  void* volume[16];
  void* panPosition[16];
  char transpose[16];
};
struct AadSfxCommand {
  unsigned char statusByte;
  void* dataByte[3];
  unsigned long ulongParam;
  signed short shortParam;
  unsigned short unused;
};
struct AadSfxSlot {
  struct AadSfxCommand commandQueue[32];
  unsigned char commandIn;
  unsigned char commandOut;
  unsigned short commandsInQueue;
  unsigned short handleCounter;
  unsigned char sfxVolume;
  unsigned char sfxPan;
};
struct AadSynthVoice {
  unsigned long voiceMask;
  unsigned long handle;
  unsigned char voiceID;
  unsigned char priority;
  unsigned char note;
  unsigned char unused;
  unsigned char program;
  unsigned char baseProg;
  unsigned char volume;
  unsigned char updateVol;
  unsigned char pan;
  unsigned char voiceNum;
  unsigned short flags;
  struct AadToneAtr* toneAtr;
  struct AadProgramAtr* progAtr;
};
struct AadDynamicLoadRequest {
  unsigned short type;
  unsigned short handle;
  unsigned long userData;
  char fileName[40];
};
struct AadDynamicBankLoadInfo {
  versionID sndFileName;
  versionID smpFileName;
  unsigned short dynamicBankIndex;
  unsigned short loadOption;
  voidFnPtr userCallbackProc;
  unsigned long sramDataSize;
  unsigned long nextSramAddr;
  unsigned long flags;
};
struct AadDynamicSfxLoadInfo {
  char snfFileName[40];
  char smfFileName[40];
  unsigned long userData;
  voidFnPtr userCallbackProc;
  unsigned short flags;
  unsigned short smfLoadingState;
  unsigned long bytesToLoad;
  unsigned short numSfxToLoad;
  unsigned short error;
  unsigned long waveTransferAddr;
  unsigned long totalSramUsed;
  unsigned short fileHandle;
  unsigned short unused;
  struct _AadDynSfxFileHdr* snfFile;
  struct AadDynSfxAttr attr;
};
struct AadNewSramBlockDesc {
  unsigned short waveID;
  unsigned short address;
  unsigned short size;
  unsigned char prevIndex;
  unsigned char nextIndex;
};
struct AadLoadedSfxToneAttr {
  unsigned short referenceCount;
  unsigned short waveID;
  struct AadToneAtr toneAttr;
};
struct AadLoadedSfxWaveAttr {
  unsigned short referenceCount;
  unsigned char unused;
  unsigned char sramHandle;
};
struct AadMasterVolFader {
  signed short volumeStep;
  signed short targetVolume;
  voidFnPtr fadeCompleteCallback;
};
struct AadVolFader {
  signed short volumeStep;
  signed short targetVolume;
  voidFnPtr fadeCompleteCallback;
};
struct gSoundData {
  unsigned long gMasterVol;
  unsigned long gMusicVol;
  unsigned long gSfxVol;
  unsigned long gVoiceVol;
  signed char gSfxOn;
  signed char gMusicOn;
  signed char gVoiceOn;
  signed char soundsLoaded;
};
struct GameTracker {
  struct _GameData_Type gameData;
  struct menu_t* menu;
  struct memcard_t* memcard;
  struct Level* level;
  struct _Instance* playerInstance;
  long drawPage;
  struct _InstanceList* instanceList;
  struct _InstancePool* instancePool;
  struct _VertexPool* vertexPool;
  struct _PrimPool* primPool;
  struct _ObjectTracker* GlobalObjects;
  tp245 controlCommand[2][5];
  tp245 controlData[2][5];
  tp245 overrideData[2][5];
  long debugFlags;
  long debugFlags2;
  struct CVECTOR wipeColor;
  signed short wipeTime;
  signed short maxWipeTime;
  signed short wipeType;
  signed short numGSignals;
  tp113 gSignal[16];
  struct LightInfo* lightInfo;
  va_list reqDisp;
  long long* drawTimerReturn;
  long usecsStartDraw;
  va_list disp;
  unsigned long displayFrameCount;
  unsigned long frameCount;
  unsigned long fps30Count;
  unsigned long vblFrames;
  unsigned long vblCount;
  long numMatrices;
  long gameFlags;
  long streamFlags;
  va_list drawNonAnimatedSegmentFunc;
  va_list drawAnimatedModelFunc;
  va_list drawDisplayPolytopeListFunc;
  va_list drawBgFunc;
  struct Level* mainDrawUnit;
  char baseAreaName[16];
  signed short levelDone;
  signed short levelChange;
  signed short hideBG;
  signed short gameMode;
  long currentHotSpot;
  long StreamUnitID;
  signed short SwitchToNewStreamUnit;
  signed short SwitchToNewWarpIndex;
  char S_baseAreaName[16];
  signed short toSignal;
  signed short fromSignal;
  signed char LastSignal;
  signed short StreamNormalA;
  signed short StreamNormalB;
  signed short StreamNormalC;
  long StreamNormalD;
  long moveRazielToStreamID;
  struct _ColorType animObjLine;
  struct _ColorType animObjShade;
  long introFXTime;
  long maxIntroFXTime;
  struct gSoundData sound;
  signed short controllerMode;
  signed short cheatMode;
  char curDynamicSoundName[16];
  signed char currentLvl;
  signed char lastLvl;
  struct Object* introFX;
  struct Intro* introFXIntro;
  tp95 drawOT;
  tp95 dispOT;
  struct P_TAG* savedOTStart;
  struct P_TAG* savedOTEnd;
  long introWaitTime;
  long mirrorZPush;
  long defVVRemoveDist;
  long defRemoveDist;
  struct _Position forcedStartPosition;
  signed short hudCollDisplay;
  long primMemUsed;
  signed char demoMode;
  signed char setDemoMode;
  signed char demoIndex;
  signed char demoEnabled;
  long cheatTimerCount;
  long playerCheatFlags;
  long savedPlayerCameraMode;
  long debugDrawFlags;
  va_list planningPool;
  va_list enemyPlanPool;
  unsigned char block_collide_override;
  unsigned char raziel_collide_override;
  signed short timeOfDay;
  long decoupleGame;
  long multGameTime;
  signed short spectral_fadeValue;
  signed short material_fadeValue;
  unsigned long drawTime;
  unsigned long currentTime;
  unsigned long currentMaterialTime;
  unsigned long currentSpectralTime;
  unsigned long currentTimeOfDayTime;
  unsigned long lastLoopTime;
  unsigned long timeMult;
  unsigned long globalTimeMult;
  unsigned long spectralTimeMult;
  unsigned long materialTimeMult;
  unsigned long currentTicks;
  unsigned long totalTime;
  unsigned long idleTime;
  long visibleInstances;
  unsigned int gameFramePassed;
  unsigned long timeSinceLastGameFrame;
  long frameRateLock;
  signed short frameRate24fps;
};
struct Spline {
  struct SplineKey* key;
  signed short numkeys;
  unsigned char type;
  unsigned char flags;
};
struct vecS {
  signed short x;
  signed short y;
  signed short z;
};
struct vecL {
  long x;
  long y;
  long z;
};
struct SplineRotKey {
  signed short count;
  struct _G2Quat_Type q;
};
struct RSpline {
  struct SplineRotKey* key;
  signed short numkeys;
  unsigned char type;
  unsigned char flags;
};
struct SplineKey {
  signed short count;
  struct vecS point;
  struct vecL dd;
  struct vecL ds;
};
struct SplineDef {
  signed short currkey;
  unsigned short denomFlag;
  long fracCurr;
};
struct _HVertex {
  signed short x;
  signed short y;
  signed short z;
  signed short normal;
  long pad;
};
struct _MONAPI_Regenerator {
  unsigned long regenTime;
  signed short introUniqueID;
  signed short streamUnitID;
};
struct __Event {
  unsigned int ID;
  unsigned int Data;
};
struct __MessageQueue {
  unsigned int Head;
  unsigned int Tail;
  struct __Event Queue[16];
};
struct __State {
  voidFnPtr Process;
  struct __MessageQueue Event;
  struct __MessageQueue Defer;
  unsigned int Data1;
  unsigned int Data2;
};
struct POLY_F4 {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  signed short x1;
  signed short y1;
  signed short x2;
  signed short y2;
  signed short x3;
  signed short y3;
};
struct EventPointers {
  long numPuzzles;
  tp120 eventInstances[1];
};
struct Camera {
  struct _CameraCore_Type core;
  long shake;
  signed short shakeFrame;
  signed short shakeScale;
  long flags;
  long lock;
  signed short mode;
  signed short state;
  signed short posState;
  signed short rotState;
  signed short tiltState;
  signed short distanceState;
  signed short lagZ;
  signed short tilt;
  struct _Position focusPoint;
  signed short focusDistance;
  struct _Instance* focusInstance;
  struct _Position oldFocusInstancePos;
  struct _Position newFocusInstancePos;
  struct _Rotation oldFocusInstanceRot;
  struct _Rotation newFocusInstanceRot;
  struct _SVector focusInstanceVelVec;
  struct _Position focusLeadPivot;
  struct _Position focusOffset;
  struct _Rotation focusRotation;
  signed short tiltVel;
  signed short tiltAccl;
  struct _SVector positionVel;
  struct _SVector positionAccl;
  struct _SVector focusPointVel;
  struct _SVector focusPointAccl;
  signed short focusDistanceVel;
  signed short focusDistanceAccl;
  struct _SVector focusRotVel;
  struct _SVector focusRotAccl;
  struct _SVector maxFocusVel;
  struct _SVector rotationVel;
  struct _SVector rotationAccl;
  signed short maxVel;
  signed short maxRot;
  struct _Position targetPos;
  signed short targetTilt;
  struct _Rotation targetRotation;
  signed short targetFocusDistance;
  struct _Position targetFocusPoint;
  signed short collisionTargetFocusDistance;
  struct _Rotation targetFocusRotation;
  signed short tfaceTilt;
  struct _Rotation collisionTargetFocusRotation;
  signed short smooth;
  struct _CameraKey* cameraKey;
  struct _Sphere focusSphere;
  struct _Sphere smallBaseSphere;
  struct _Sphere posSphere;
  signed short lookTimer;
  signed short lookSavedMode;
  signed short presetIndex;
  tp51 presetFocusDistance[3];
  long minFocusDistance;
  long maxFocusDistance;
  long minTilt;
  long maxTilt;
  long pad[3];
  long minXYDist;
  long maxXYDist;
  long oppositeError;
  long tempsplinePointAhead;
  long noTeleport;
  tp245 focusDistanceList[3][3];
  tp245 tiltList[3][3];
  long cineControl;
  signed short stack;
  signed short targetStack;
  long savedMode[3];
  long savedTargetFocusDistance[3];
  struct _Rotation savedFocusRotation;
  signed short savedFocusDistance;
  signed short signalFocusDistance;
  struct _SavedCinematic savedCinematic[3];
  struct _Rotation savedfocusRotation;
  struct _Position signalPos;
  signed short pad11;
  struct _Rotation signalRot;
  signed short forced_movement;
  signed short last_forced_movement;
  signed short rotDirection;
  unsigned long lastModTime;
  struct _Rotation lookRot;
  struct MultiSpline* Spline00;
  struct MultiSpline* Spline01;
  long cuckooTimer;
  signed short teleportZRot;
  signed short extraZRot;
  signed short extraXRot;
  signed short leftTimer;
  signed short rightTimer;
  signed short collideRotControl;
  signed short collision_lastPush;
  signed short collision_timer;
  unsigned long prev_instance_mode;
  unsigned long instance_mode;
  long instance_xyvel;
  long instance_prev_xyvel;
  struct _Position real_focuspoint;
  signed short always_rotate_flag;
  signed short follow_flag;
  signed short actual_x_rot;
  signed short actual_vel_x;
  signed short actual_acc_x;
  signed short x_rot_change;
  signed short focuspoint_fallz;
  signed short lead_angle;
  signed short lead_vel;
  signed short lead_accl;
  signed short lead_timer;
};
struct DebugMenuLine {
  tp10 type;
  long lower;
  long upper;
  versionID text;
  long long* var_address;
  long bit_mask;
};
struct _ButtonTexture {
  signed short tpage;
  signed short clut;
  signed short textureW;
  signed short textureH;
  struct _BlockVramEntry* vramBlock;
  long xshift;
};
struct _BlockVramEntry {
  struct _BlockVramEntry* next;
  unsigned char type;
  unsigned char flags;
  signed short time;
  long ID;
  signed short x;
  signed short y;
  signed short w;
  signed short h;
  long area;
};
struct FontChar {
  signed short x;
  signed short y;
  signed char c;
  signed char color;
};
struct _BigFileEntry {
  long fileHash;
  long fileLen;
  long filePos;
  long checkSumFull;
};
struct _BigFileDirEntry {
  signed short streamUnitID;
  signed short numFiles;
  long subDirOffset;
};
struct _BigFileDir {
  long numFiles;
  struct _BigFileEntry fileList[0];
};
struct _BigFile {
  long bigfileBaseOffset;
  struct _BigFileDir* rootDir;
  struct _BigFileDir* currentDir;
  struct _BigFileDir* cachedDir;
  long currentDirID;
  long cachedDirID;
  long searchDirID;
  long numSubDirs;
  struct _BigFileDirEntry* subDirList;
};
struct _NonBlockLoadEntry {
  long fileHash;
  long dirHash;
  long filePos;
  long long* loadAddr;
  long loadSize;
  long checksum;
  long checksumType;
  long memType;
  long posInFile;
  va_list retFunc;
  va_list retData;
  va_list retData2;
  tp81 retPointer;
  char fileName[64];
};
struct _ReadQueueEntry {
  long readStartPos;
  long readSize;
  long readCurSize;
  va_list readStartDest;
  va_list readCurDest;
  long readStatus;
  long checksum;
  long checksumType;
  va_list retFunc;
  va_list retData;
  va_list retData2;
};
struct _FX_MATRIX {
  struct NodeType node;
  long flags;
  struct MATRIX lwTransform;
};
struct _FX_PRIM {
  struct NodeType node;
  struct TextureMT3* texture;
  long flags;
  long timeToLive;
  va_list process;
  struct _FX_MATRIX* matrix;
  long color;
  long startColor;
  long endColor;
  signed short colorFadeValue;
  signed short colorFadeStep;
  struct _Position position;
  signed short fadeStep;
  tp51 fadeValue[4];
  struct _Position v0;
  signed short work0;
  struct _Position v1;
  signed short work1;
  struct _Position v2;
  signed short work2;
  struct _Position v3;
  signed short work3;
};
struct BASIC_LINE_G2 {
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char r1;
  unsigned char g1;
  unsigned char b1;
  unsigned char p1;
  signed short x1;
  signed short y1;
};
struct _BASIC_G4 {
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char r1;
  unsigned char g1;
  unsigned char b1;
  unsigned char pad1;
  signed short x1;
  signed short y1;
  unsigned char r2;
  unsigned char g2;
  unsigned char b2;
  unsigned char pad2;
  signed short x2;
  signed short y2;
  unsigned char r3;
  unsigned char g3;
  unsigned char b3;
  unsigned char pad3;
  signed short x3;
  signed short y3;
};
struct _BASIC_F4 {
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  signed short x1;
  signed short y1;
  signed short x2;
  signed short y2;
  signed short x3;
  signed short y3;
};
struct __BubbleParams {
  signed short DisperseFrames;
  signed short KillScale;
  signed short MinSplashSize;
  signed short MaxSpeed;
  signed short MaxSpeedRange;
  signed short ScaleRate;
  signed short ScaleRateRange;
  signed short StartScale;
  signed short StartScaleRange;
  signed short UniqueBubbles;
};
struct _GenericParticleParams {
  signed short model;
  signed short texture;
  signed short size;
  unsigned char StartOnInit;
  unsigned char type;
  signed short birthRadius;
  signed char startSegment;
  signed char endSegment;
  struct _Position direction;
  unsigned char spectral_colorize;
  unsigned char absolute_direction;
  struct _Position acceleration;
  signed short useInstanceModel;
  long startColor;
  long endColor;
  signed short lifeTime;
  signed short primLifeTime;
  signed short startFadeValue;
  signed short fadeStep;
  signed char numberBirthParticles;
  signed char z_undulation_mode;
  signed short scaleSpeed;
  struct _Position offset;
  signed short startScale;
};
struct _GenericRibbonParams {
  signed short id;
  signed short StartOnInit;
  signed short startSegment;
  signed short endSegment;
  signed short type;
  signed short ribbonLifeTime;
  signed short faceLifeTime;
  signed short startFadeValue;
  long startColor;
  long endColor;
};
struct _GenericGlowParams {
  signed short id;
  signed short StartOnInit;
  unsigned char segment;
  unsigned char segmentEnd;
  signed short numSegments;
  signed short color_num;
  signed short numColors;
  long atuColorCycleRate;
  signed short width;
  signed short height;
  long lifetime;
  signed short fadein_time;
  signed short fadeout_time;
};
struct _GenericLightningParams {
  signed short type;
  signed short lifeTime;
  signed short deg;
  signed short deg_inc;
  struct _Position start_offset;
  signed short startSeg;
  struct _Position end_offset;
  signed short endSeg;
  signed short matrixSeg;
  signed short width;
  signed short small_width;
  signed short segs;
  signed short sine_size;
  signed short variation;
  long color;
  long glow_color;
};
struct _GenericBlastringParams {
  signed short type;
  signed short lifeTime;
  signed short matrixSeg;
  signed short segment;
  struct _SVector offset;
  signed short sortInWorld;
  signed short radius;
  signed short size1;
  signed short size2;
  signed short endRadius;
  signed short colorchange_radius;
  unsigned int vel;
  unsigned int accl;
  signed short height1;
  signed short height2;
  signed short height3;
  signed short predator_offset;
  long startColor;
  long endColor;
};
struct _GenericFlashParams {
  signed short type;
  signed short timeToColor;
  long color;
  signed short timeAtColor;
  signed short timeFromColor;
};
struct XAFileInfo {
  unsigned int startPos;
};
struct CdCommand {
  unsigned short flags;
  unsigned char unused;
  unsigned char cdCommand;
  void* cdCmdParam[4];
};
struct VoiceCommand {
  unsigned char voiceCmd;
  unsigned char nextVoiceStatus;
  unsigned short voiceCmdParam;
};
struct _StreamUnit {
  long StreamUnitID;
  signed short used;
  signed short flags;
  struct Level* level;
  char baseAreaName[16];
  signed short toSignal;
  signed short fromSignal;
  long FrameCount;
  tp51 eventVariables[6];
  long FogColor;
  signed short UnitFogFar;
  signed short UnitFogNear;
  signed short TargetFogFar;
  signed short TargetFogNear;
  signed short sfxFileHandle;
  signed short pad;
};
struct _LoadQueueEntry {
  struct _LoadQueueEntry* next;
  signed short status;
  signed char relocateBinary;
  signed char mempackUsed;
  struct _NonBlockLoadEntry loadEntry;
  long endLoadTime;
};
struct _SavedIntro {
  signed short savedID;
  signed short saveSize;
  char name[12];
  signed short introUniqueID;
  signed short streamUnitID;
  signed short birthUnitID;
  unsigned char lightGroup;
  unsigned char specturalLightGroup;
  struct _Rotation rotation;
  struct _Position position;
  long flags;
  long flags2;
  signed short extraDataSize;
  unsigned short attachedUniqueID;
  signed short splineFlags;
  signed short splineKeyFrame;
  signed short splineClipBeg;
  signed short splineClipEnd;
};
struct SavedEvent {
  signed short savedID;
  signed short saveSize;
  long areaID;
  signed short eventNumber;
  tp51 eventVariables[5];
};
struct SavedBspTree {
  struct _Position localOffset;
  signed short flags;
};
struct EventBasicObject {
  signed short id;
};
struct EventWildCardObject {
  signed short id;
  signed short spad;
  long unitID;
  versionID objectName;
};
struct Event {
  signed short eventNumber;
  signed short numInstances;
  unsigned char numActions;
  unsigned char processingPuppetShow;
  tp51 eventVariables[5];
  tp88 instanceList;
  tp88 conditionalList;
  tp88 actionList;
};
struct ScriptPCode {
  unsigned short sizeOfPcodeStream;
  unsigned short conditionBits;
  tp19 data;
};
struct InstanceSpline {
  struct _Instance* instance;
  struct MultiSpline* spline;
  long attribute;
  long isParent;
  long isClass;
  long splineFlags;
};
struct Vector3d {
  signed short vx;
  signed short vy;
  signed short vz;
  signed short pad1;
  signed short errorx;
  signed short errory;
  signed short errorz;
  signed short pad2;
};
struct Rotation3d {
  signed short vx;
  signed short vy;
  signed short vz;
  signed short pad1;
  signed short errorx;
  signed short errory;
  signed short errorz;
  signed short pad2;
  long attribute;
};
struct InstanceObject {
  struct _Instance* instance;
  long attribute;
};
struct EventObject {
  struct Event* event;
  long attribute;
};
struct SavedEventObject {
  struct SavedEvent* savedEvent;
  long attribute;
  long areaID;
  long eventNumber;
};
struct GameObject {
  long attribute;
};
struct SignalObject {
  struct _MultiSignal* msignal;
  long attribute;
};
struct IntroObject {
  struct Intro* intro;
  long attribute;
};
struct InstanceAnimate {
  struct _Instance* instance;
  long attribute;
};
struct InstanceAnimateTexture {
  struct _Instance* instance;
  struct AniTex* aniTextures;
  long attribute;
};
struct ListObject {
  struct EventWildCardObject* eventInstance;
  long attribute[5];
  long numberOfAttributes;
  long lineID;
};
struct SubListObject {
  tp88 instanceList;
  long numberOfInstances;
  long numberOfAttributes;
  long attribute[5];
};
struct TGroupObject {
  struct BSPTree* bspTree;
  struct _StreamUnit* streamUnit;
  long attribute;
  tp51 arg[2];
};
struct ConstrictInfo {
  struct _Instance* instance;
  long attribute;
};
struct CameraObject {
  struct Camera* camera;
  long frames;
  long attribute;
};
struct EventVmObject {
  struct _VMObject* vmObjectPtr;
  struct Level* level;
  long attribute;
};
struct AreaObject {
  struct _StreamUnit* streamUnit;
  long attribute;
  long unitID;
};
struct SoundObject {
  signed short flags;
  signed short attribute;
  long soundNumber;
  long value;
  long duration;
};
struct StackType {
  long id;
};
struct __ReaverSaveDat {
  unsigned long pad;
};
struct debug_dispatch_t {
  tp10 type;
  voidFnPtr fn;
};
struct debug_format_t {
  unsigned int xpos;
  unsigned int ypos;
  unsigned int is_centered;
};
struct POLY_GT3 {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char u0;
  unsigned char v0;
  unsigned short clut;
  unsigned char r1;
  unsigned char g1;
  unsigned char b1;
  unsigned char p1;
  signed short x1;
  signed short y1;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  unsigned char r2;
  unsigned char g2;
  unsigned char b2;
  unsigned char p2;
  signed short x2;
  signed short y2;
  unsigned char u2;
  unsigned char v2;
  unsigned short pad2;
};
struct POLY_GT4 {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char u0;
  unsigned char v0;
  unsigned short clut;
  unsigned char r1;
  unsigned char g1;
  unsigned char b1;
  unsigned char p1;
  signed short x1;
  signed short y1;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  unsigned char r2;
  unsigned char g2;
  unsigned char b2;
  unsigned char p2;
  signed short x2;
  signed short y2;
  unsigned char u2;
  unsigned char v2;
  unsigned short pad2;
  unsigned char r3;
  unsigned char g3;
  unsigned char b3;
  unsigned char p3;
  signed short x3;
  signed short y3;
  unsigned char u3;
  unsigned char v3;
  unsigned short pad3;
};
struct _Vector {
  long x;
  long y;
  long z;
};
struct _PFace {
  unsigned long* tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char u0;
  unsigned char v0;
  signed short clut;
  signed short x1;
  signed short y1;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  signed short x2;
  signed short y2;
  unsigned char u2;
  unsigned char v2;
  signed short pad1;
  long pad2;
  long pad3;
};
struct _PolytopeList {
  long numPolytopes;
  tp113 polytope[1024];
};
struct UVTYPE {
  unsigned char u;
  unsigned char v;
  signed short pad;
};
struct POLY_G3_SEMITRANS {
  unsigned long tag;
  unsigned long dr_tpage;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char r1;
  unsigned char g1;
  unsigned char b1;
  unsigned char pad1;
  signed short x1;
  signed short y1;
  unsigned char r2;
  unsigned char g2;
  unsigned char b2;
  unsigned char pad2;
  signed short x2;
  signed short y2;
};
struct _POLY_NG4 {
  unsigned long tag;
  unsigned long drawTPage1;
  struct _BASIC_G4 p1;
};
struct _GT3ZVertexD3D_Type {
  tp6 x;
  tp6 y;
  tp6 z;
  tp6 rhw;
  signed char rgba;
  tp6 u;
  tp6 v;
};
struct SP_SUBDIV_STRUCT {
  struct _SVector vertex0;
  struct _SVector vertex1;
  struct _SVector vertex2;
  struct SVECTOR face_v0;
  struct SVECTOR face_v1;
  struct SVECTOR face_v2;
  struct SVECTOR face_v01;
  struct SVECTOR face_v12;
  struct SVECTOR face_v20;
  struct UVTYPE face_uv0;
  struct UVTYPE face_uv1;
  struct UVTYPE face_uv2;
  struct UVTYPE face_uv01;
  struct UVTYPE face_uv12;
  struct UVTYPE face_uv20;
  struct _ColorType color0;
  struct _ColorType color1;
  struct _ColorType color2;
  struct _ColorType color01;
  struct _ColorType color12;
  struct _ColorType color20;
  struct _Vector out[4];
  long color[4];
  long texinfo[3];
  struct DVECTOR sxy[4];
};
struct POLY_FT4 {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char u0;
  unsigned char v0;
  unsigned short clut;
  signed short x1;
  signed short y1;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  signed short x2;
  signed short y2;
  unsigned char u2;
  unsigned char v2;
  unsigned short pad1;
  signed short x3;
  signed short y3;
  unsigned char u3;
  unsigned char v3;
  unsigned short pad2;
};
struct FontTracker {
  struct FontChar font_buffer[256];
  long font_xpos;
  long font_ypos;
  long font_buffIndex;
  signed short font_tpage;
  signed short font_clut;
  signed short font_vramU;
  signed short font_vramV;
  signed short font_width;
  signed short sprite_sort_push;
  signed short font_vramX;
  signed short font_vramY;
  signed char color_global;
  signed char color_local;
};
struct font_color_t {
  unsigned int r;
  unsigned int g;
  unsigned int b;
};
struct FontPos {
  signed char x;
  signed char y;
  signed char w;
  signed char h;
};
struct JoypadMappingStruct {
  unsigned short psxData;
  unsigned short translation;
};
struct AnalogueData {
  unsigned short pad;
  unsigned char xR;
  unsigned char yR;
  unsigned char xL;
  unsigned char yL;
};
struct ControllerPacket {
  unsigned char transStatus;
  unsigned char dataFormat;
};
struct _G2EulerAngles_Type {
  signed short x;
  signed short y;
  signed short z;
  signed short order;
};
struct _InstanceHandle {
  struct _Instance* instance;
  long instanceID;
};
struct evCollideInstanceStatsData {
  struct _Instance* instance;
  unsigned long distance;
  struct _SVector relativePosition;
  long xyDistance;
  long zDelta;
};
struct INICommand {
  signed short command;
  signed short numParameters;
  long parameter[0];
};
struct PhysObProperties {
  unsigned short version;
  unsigned short family;
  unsigned short ID;
  unsigned short Type;
};
struct PhysObSplinter {
  long numSplintData;
  va_list splinterData;
};
struct PhysObWeaponAttributes {
  long Damage;
  long AltDamage;
  signed short knockBackDistance;
  signed char knockBackFrames;
  signed char dropSound;
  signed char Class;
  signed char ThrowSphere;
  signed char LeftHandSphere;
  signed char RightHandSphere;
  struct _PhysObLight* Light;
  struct PhysObSplinter splinter;
};
struct _PhysObLight {
  unsigned char length;
  unsigned char segment;
  signed short speed;
  struct LightTableEntry* lightTable;
};
struct __PhysObProjectileData {
  signed char model;
  signed char startAnim;
  signed char loopAnim;
  signed char endAnim;
  long flags;
  struct PhysObWeaponAttributes* weapon;
};
struct LightTableEntry {
  signed short r;
  signed short g;
  signed short b;
  signed short radius;
};
struct SavedIntroSmall {
  signed short savedID;
  signed short saveSize;
  signed short introUniqueID;
  signed short extraDataSize;
};
struct CameraCollisionInfo {
  tp120 tfaceList[5];
  tp120 tfaceTerrain[5];
  tp51 bspTree[6];
  tp51 lengthList[6];
  long flags;
  long line;
  long numCollided;
  long lenCenterToExtend;
  struct _Sphere* start;
  struct _Sphere* end;
  long cldLines;
};
struct _LCollideInfo {
  struct _TFace* tface;
  struct _Terrain* terrain;
  unsigned int curTree;
};
struct _PCollideInfo {
  signed short type;
  signed short segment;
  va_list prim;
  struct _Instance* inst;
  struct SVECTOR wNormal;
  struct SVECTOR* newPoint;
  struct SVECTOR* oldPoint;
  struct SVECTOR cldPoint;
  long collideType;
  struct _Instance* instance;
};
struct CdlFILE {
  struct CdlLOC pos;
  unsigned long size;
  char name[16];
};
struct _LoadStatus {
  struct _ReadQueueEntry currentQueueFile;
  long state;
  long bytesTransferred;
  long lastCheckPos;
  long cdWaitTime;
  tp28 compSrcAddr;
  tp28 compDstAddr;
  long compControlbits;
  long compControl;
  long compEndBytes;
  long decompressLen;
  long checksum;
  long long* checkAddr;
  struct _BigFile bigFile;
  va_list buffer1;
  va_list buffer2;
  unsigned int changeDir;
  long endLoadTime;
  long currentDirLoading;
  long currentSector;
  long sectorTime;
  long seekTime;
};
struct RedirectList {
  long numPointers;
  long long* data;
};
struct DRAWENV {
  struct RECT clip;
  tp51 ofs[2];
  struct RECT tw;
  unsigned short tpage;
  unsigned char dtd;
  unsigned char dfe;
  unsigned char isbg;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  struct DR_ENV dr_env;
};
struct DISPENV {
  struct RECT disp;
  struct RECT screen;
  unsigned char isinter;
  unsigned char isrgb24;
  unsigned char pad0;
  unsigned char pad1;
};
struct BLK_FILL {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  unsigned short x0;
  unsigned short y0;
  unsigned short w;
  unsigned short h;
};
struct MainTracker {
  long mainState;
  long previousState;
  long movieNum;
  long done;
};
struct POLY_F4_SEMITRANS {
  unsigned long tag;
  unsigned long dr_tpage;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  signed short x1;
  signed short y1;
  signed short x2;
  signed short y2;
  signed short x3;
  signed short y3;
};
struct FullScreenItem {
  char name[48];
  unsigned int timeout;
  unsigned int buttonTimeout;
  unsigned int nextItem;
};
struct _FXTracker {
  struct _FX_MATRIX matrixPool[32];
  struct NodeType usedMatrixList;
  struct NodeType freeMatrixList;
  struct _FX_PRIM primPool[256];
  struct NodeType usedPrimList;
  struct NodeType usedPrimListSprite;
  struct NodeType freePrimList;
};
struct StreamUnitPortal {
  char tolevelname[16];
  long MSignalID;
  long streamID;
  signed short minx;
  signed short miny;
  signed short minz;
  signed short flags;
  signed short maxx;
  signed short maxy;
  signed short maxz;
  signed short pad2;
  struct _StreamUnit* toStreamUnit;
  struct _SVector t1[3];
  struct _SVector t2[3];
};
struct SignalInfo {
  tp149 signalHandleFunc;
  signed short length;
  signed short onlyPlayer;
  voidFnPtr signalRelocateFunc;
};
struct _Triangle2D {
  signed short x0;
  signed short y0;
  signed short x1;
  signed short y1;
  signed short x2;
  signed short y2;
};
struct _HNormal {
  signed short x;
  signed short y;
  signed short z;
  signed short pad;
};
struct _HFaceInfo {
  long flags;
  long attr;
  struct _HFace* hface;
  struct _SVector normal;
  struct _HVertex* vertex0;
  struct _HVertex* vertex1;
  struct _HVertex* vertex2;
};
struct _CollideInfo {
  va_list level;
  signed char flags;
  signed char segment;
  signed char type0;
  signed char type1;
  va_list prim0;
  va_list prim1;
  va_list inst0;
  va_list inst1;
  struct SVECTOR point0;
  struct SVECTOR point1;
  struct _Position offset;
  signed short bspID;
};
struct SCollideInfo {
  struct _Sphere* sphere;
  struct SVECTOR* oldPos;
  voidFnPtr collideFunc;
  long id;
  long segment;
  struct _Instance* instance;
  va_list prim;
};
struct PandTScratch {
  struct MATRIX posMatrix;
  struct _SVector normal;
  struct _Vector dpv;
  struct _SVector planePoint;
  long ignore_attr;
  long accept_attr;
  tp19 backface_flag;
  struct _SVector newPos;
  struct _SVector oldPos;
  unsigned int flags;
  unsigned int i;
  unsigned int slack;
  long in_spectral;
  tp19 normalList;
  struct _TVertex* vertexList;
  struct _TFace* result;
  struct _SVector line;
};
struct SandHFScratch {
  struct _SVector normal;
  struct MATRIX posMatrix;
  struct _Vector dpv;
  struct _SVector triPoint;
  struct _SVector planePoint;
};
struct SandTScratch {
  struct MATRIX posMatrix;
  struct _Vector dpv;
  struct _HNormal* normalList;
  struct _CollideInfo collideInfo;
  struct _HFaceInfo hfaceInfo;
  struct _SVector midPoint;
  struct _SVector spherePos;
  voidFnPtr collideFunc;
  struct _Instance* instance;
  long edge;
  long in_spectral;
  struct _SVector oldPos;
  va_list prim;
  struct _SVector normal;
  struct _Sphere sphere;
  signed short result;
  signed short i;
  long collide_ignoreAttr;
  long collide_acceptAttr;
  long midRadius;
  struct _TVertex* vertexList;
};
struct IandTScratch {
  struct MATRIX posMatrix;
  struct _SVector normal;
  struct _Vector dpv;
  struct _SVector planePoint;
  struct _SVector line;
  struct _SVector oldPos;
  struct _SVector newPos;
  unsigned int i;
  long in_spectral;
  tp19 normalList;
  struct _TVertex* vertexList;
};
struct PandTFScratch {
  struct MATRIX posMatrix;
  struct _SVector planePoint;
  struct _SVector newPos;
  struct _SVector oldPos;
  struct _SVector normal;
  struct _Vector dpv;
};
struct BSPScratch {
  struct MATRIX vv[2];
  struct MATRIX camMatrix;
  struct VECTOR dpv[3];
  long d[6];
  struct MATRIX boundMatrix;
  long in_spectral;
};
struct _ObjectOwnerInfo {
  long magicnum;
  signed short animID;
  char objectName[0];
};
struct ObjectAccess {
  versionID objectName;
  va_list object;
};
struct POLY_FT3 {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char u0;
  unsigned char v0;
  unsigned short clut;
  signed short x1;
  signed short y1;
  unsigned char u1;
  unsigned char v1;
  unsigned short tpage;
  signed short x2;
  signed short y2;
  unsigned char u2;
  unsigned char v2;
  unsigned short pad1;
};
struct _Mirror {
  signed short a;
  signed short b;
  signed short c;
  signed short d;
};
struct _FXHalvePlane {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  long diffTime;
  struct _PlaneConstants ringPlane;
  long currentColor;
  long long* colorArray;
  signed short numColors;
  signed short colorBlendLife;
};
struct _FXGlowEffect {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  unsigned long diffTime;
  long long* colorArray;
  long currentColor;
  signed short numColors;
  signed short colorBlendCycle;
  signed short width;
  signed short height;
  unsigned char numSegments;
  unsigned char SegmentInc;
  signed short segment;
  signed short fadein_time;
  signed short fadeout_time;
};
struct TransformAnimatedInstanceVerticesWork_t {
  struct MATRIX scTransform;
  struct MATRIX mirrorMatrix;
  struct MATRIX llm;
  struct _Vector vector;
};
struct GenericTune {
  long flags;
  va_list shatterData;
};
struct FXSplinter {
  signed short flags;
  signed short soundFx;
  signed short chunkVelXY;
  signed short chunkVelZ;
  signed short chunkVelRng;
  signed short triVelRng;
  signed short lifetime;
  signed short faceLimit;
  signed short rotRateRng;
  signed short gravityZ;
};
struct DR_TPAGE {
  unsigned long tag;
  unsigned long code[1];
};
struct _POLY_SG4 {
  unsigned long tag;
  unsigned long drawTPage1;
  struct _BASIC_G4 p1;
  unsigned long drawTPage2;
  struct _BASIC_F4 p2;
};
struct __GenericBubbleParams {
  struct __BubbleParams BP;
  signed short number;
  signed short birthradius;
  signed short velx;
  signed short vely;
  signed short velz;
  signed short velxrange;
  signed short velyrange;
  signed short velzrange;
  signed short accx;
  signed short accy;
  signed short accz;
  signed short accxrange;
  signed short accyrange;
  signed short acczrange;
};
struct _FXGeneralEffect {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
};
struct _FXRibbon {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  signed short numberVerts;
  signed short endIndex;
  struct SVECTOR* vertexPool;
  signed short startSegment;
  signed short endSegment;
  long startColor;
  long endColor;
  signed short colorStepValue;
  signed short faceLifeTime;
  signed short startFadeValue;
  signed short fadeStep;
};
struct _FXParticle {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  struct TextureMT3* texture;
  va_list fxprim_modify_process;
  va_list fxprim_process;
  signed short size;
  signed short primLifeTime;
  signed short birthRadius;
  signed short scaleSpeed;
  struct _Position direction;
  unsigned short flag_bits;
  struct _Position acceleration;
  signed short startScale;
  struct _Position offset;
  signed char startSegment;
  signed char z_undulate;
  long startColor;
  long endColor;
  signed short colorStepValue;
  signed char numberBirthParticles;
  signed char endSegment;
  signed short startFadeValue;
  signed short fadeStep;
};
struct _FXLightBeam {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  signed short startSeg;
  signed short endSeg;
  long color;
};
struct _FXBlastringEffect {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  struct _SVector position;
  struct MATRIX matrix;
  signed short segment;
  signed short pad;
  unsigned int radius;
  unsigned int size1;
  unsigned int size2;
  unsigned int endRadius;
  unsigned int colorchange_radius;
  unsigned int vel;
  unsigned int accl;
  unsigned int height1;
  unsigned int height2;
  unsigned int height3;
  signed short predator_offset;
  signed short sortInWorld;
  long color;
  long startColor;
  long endColor;
};
struct _FXForceFieldEffect {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  struct _SVector offset;
  signed short size;
  signed short size_diff;
  signed short size_change;
  signed short deg;
  signed short deg_change;
  signed short start_fade;
  signed short end_fade;
  long color;
};
struct _FXLightning {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  signed short deg;
  signed short deg_inc;
  struct _Position start_offset;
  signed short startSeg;
  struct _Instance* end_instance;
  struct _Position end_offset;
  signed short endSeg;
  signed short matrixSeg;
  signed short width;
  signed short small_width;
  signed short segs;
  signed short sine_size;
  signed short variation;
  long color;
  long glow_color;
};
struct _FXFlash {
  va_list next;
  va_list continue_process;
  struct _Instance* instance;
  unsigned char effectType;
  unsigned char type;
  signed short lifeTime;
  long timeToColor;
  long timeAtColor;
  long timeFromColor;
  long currentTime;
  long color;
};
struct GenericFXObject {
  struct _GenericParticleParams* ParticleList;
  struct _GenericRibbonParams* RibbonList;
  struct _GenericGlowParams* GlowList;
  struct _GenericLightningParams* LightningList;
  struct _GenericBlastringParams* BlastList;
  struct _GenericFlashParams* FlashList;
  long long* ColorList;
};
struct evObjectDraftData {
  signed short force;
  unsigned short radius;
  unsigned short radiusCoef;
  unsigned short height;
  unsigned short maxVelocity;
};
struct _GlyphTuneData {
  signed short glyph_size;
  signed short glyph_darkness;
  char glyph_costs[8];
  tp51 glyph_range[8];
  long color_array[28];
};
struct __ReaverData {
  signed char ReaverPickedUp;
  signed char ReaverOn;
  signed short ReaverSize;
  signed short CurrentReaver;
  signed short ReaverDeg;
  long ReaverImbueTime;
  long ReaverGlowColor;
  long ReaverBladeColor;
  long ReaverBladeGlowColor;
  signed short ReaverScale;
  signed short ReaverTargetScale;
  struct __ReaverSaveDat saveData;
};
struct __ReaverTuneData {
  unsigned long spectralGlowColor;
  unsigned long materialGlowColor;
  unsigned long sunlightGlowColor;
  unsigned long waterGlowColor;
  unsigned long stoneGlowColor;
  unsigned long fireGlowColor;
  unsigned long spiritGlowColor;
  unsigned long soundGlowColor;
  unsigned long spectralInnerColor;
  unsigned long materialInnerColor;
  unsigned long sunlightInnerColor;
  unsigned long waterInnerColor;
  unsigned long stoneInnerColor;
  unsigned long fireInnerColor;
  unsigned long spiritInnerColor;
  unsigned long soundInnerColor;
  unsigned long spectralInnerGlowColor;
  unsigned long materialInnerGlowColor;
  unsigned long sunlightInnerGlowColor;
  unsigned long waterInnerGlowColor;
  unsigned long stoneInnerGlowColor;
  unsigned long fireInnerGlowColor;
  unsigned long spiritInnerGlowColor;
  unsigned long soundInnerGlowColor;
  unsigned long icon_colors[24];
};
struct _POLY_TF4 {
  unsigned long tag;
  unsigned long drawTPage;
  struct _BASIC_F4 p1;
};
struct _POLY_2G4 {
  unsigned long tag;
  struct _BASIC_G4 p1;
  struct _BASIC_G4 p2;
};
struct _POLY_2G4T {
  unsigned long tag;
  unsigned long drawTPage1;
  struct _BASIC_G4 p1;
  struct _BASIC_G4 p2;
};
struct ObjectFunc {
  versionID scriptName;
  voidFnPtr initFunc;
  voidFnPtr processFunc;
  voidFnPtr collideFunc;
  tp159 queryFunc;
  voidFnPtr messageFunc;
  voidFnPtr additionalCollideFunc;
  voidFnPtr relocateTuneFunc;
  voidFnPtr relocateInstObFunc;
};
struct evAnimationInstanceSwitchData {
  struct _Instance* instance;
  unsigned int anim;
  unsigned int frame;
  unsigned int frames;
  unsigned int mode;
};
struct evControlSaveDataData {
  long length;
  va_list data;
};
struct AadInitAttr {
  unsigned short updateMode;
  unsigned short numSlots;
  voidFnPtr nonBlockLoadProc;
  voidFnPtr nonBlockBufferedLoadProc;
  tp401 memoryMallocProc;
  voidFnPtr memoryFreeProc;
  unsigned char memMallocType;
  unsigned char unused1;
  unsigned short unused2;
};
struct ObjectPeriodicSound {
  unsigned char type;
  unsigned char numSfxIDs;
  unsigned char soundInst;
  unsigned char flags;
  unsigned short minVolDistance;
  signed short pitch;
  unsigned short pitchVariation;
  unsigned char maxVolume;
  unsigned char maxVolVariation;
  unsigned char initialDelay;
  unsigned char initialDelayVariation;
  unsigned char onTime;
  unsigned char onTimeVariation;
  unsigned char offTime;
  unsigned char offTimeVariation;
};
struct ObjectEventSound {
  unsigned char type;
  unsigned char numSfxIDs;
  unsigned char soundInst;
  unsigned char flags;
  unsigned short minVolDistance;
  signed short pitch;
  unsigned short pitchVariation;
  unsigned char maxVolume;
  unsigned char maxVolVariation;
  unsigned char initialDelay;
  unsigned char initialDelayVariation;
};
struct ObjectOneShotSound {
  unsigned char type;
  unsigned char numSfxIDs;
  unsigned char soundInst;
  unsigned char flags;
  unsigned short minVolDistance;
  signed short pitch;
  unsigned short pitchVariation;
  unsigned char maxVolume;
  unsigned char maxVolVariation;
  unsigned char initialDelay;
  unsigned char initialDelayVariation;
};
struct SoundEffectChannel {
  unsigned char inUse;
  unsigned char unused;
  unsigned short unused1;
  unsigned long handle;
  signed short volume;
  signed short volumeChangeTime;
  signed short volumeChangeTimeSave;
  signed short volumeChangePerUpdate;
  signed short volumeChangeSign;
  signed short volumeChangeErrPerUpdate;
  signed short volumeChangeError;
  signed short pitch;
  signed short pitchChangeTime;
  signed short pitchChangeTimeSave;
  signed short pitchChangePerUpdate;
  signed short pitchChangeSign;
  signed short pitchChangeErrPerUpdate;
  signed short pitchChangeError;
};
struct AadVolume {
  signed short left;
  signed short right;
};
struct AadSequenceHdr {
  unsigned long sequenceID;
  unsigned long quarterNoteTime;
  unsigned short ppqn;
  unsigned short version;
  unsigned short numTracks;
  unsigned short unused;
};
struct AadTempo {
  unsigned long quarterNoteTime;
  unsigned short ppqn;
};
struct AadMemoryStruct {
  unsigned long updateCounter;
  unsigned char numSlots;
  unsigned char updateMode;
  signed short masterVolume;
  struct AadMasterVolFader masterVolFader;
  unsigned char sfxMasterVol;
  unsigned char musicMasterVol;
  unsigned short flags;
  struct AadVolFader musicMasterVolFader;
  tp120 sequenceSlots[8];
  struct AadSfxSlot sfxSlot;
  struct AadSynthVoice synthVoice[24];
  char voiceStatus[24];
  tp61 voicePitchSave[24];
  unsigned long voiceKeyOffRequest;
  unsigned long voiceKeyOnRequest;
  unsigned long voiceReverbRequest;
  tp120 dynamicSoundBankHdr[2];
  tp120 dynamicProgramAtr[2];
  tp120 dynamicToneAtr[2];
  tp127 dynamicWaveAddr[2];
  tp380 dynamicSequenceAddressTbl[2];
  tp127 dynamicSequenceLabelOffsetTbl[2];
  void* dynamicBankStatus[2];
  tp124 dynamicSoundBankData[2];
  unsigned long dynamicSoundBankSramData[2];
  unsigned long dynamicSoundBankSramDataSize[2];
  void* dynamicSoundBankLoadOption[2];
  struct AadDynamicLoadRequest loadRequestQueue[8];
  struct AadDynamicBankLoadInfo dynamicBankLoadInfo;
  tp28 loadBufferAddress;
  unsigned long loadBufferSize;
  voidFnPtr nonBlockLoadProc;
  voidFnPtr nonBlockBufferedLoadProc;
  tp401 memoryMallocProc;
  voidFnPtr memoryFreeProc;
  unsigned char memMallocType;
  unsigned char nextLoadReqIn;
  unsigned char nextLoadReqOut;
  unsigned char numLoadReqsQueued;
  struct AadDynamicSfxLoadInfo dynamicSfxLoadInfo;
  struct _AadDynSfxFileHdr* firstDynSfxFile;
  void* sfxToneMasterList[512];
  void* sfxWaveMasterList[512];
  struct AadLoadedSfxToneAttr sfxToneAttrTbl[128];
  struct AadLoadedSfxWaveAttr sfxWaveAttrTbl[120];
  unsigned short nextToneIndex;
  unsigned short nextWaveIndex;
  struct AadNewSramBlockDesc sramDescriptorTbl[128];
  unsigned short nextSramDescIndex;
  unsigned char firstSramBlockDescIndex;
  unsigned char unused;
  unsigned short unused1;
  unsigned short nextFileHandle;
  voidFnPtr controller11Callback;
  voidFnPtr endSequenceCallback;
  long controller11CallbackData;
  long endSequenceCallbackData;
  void* userVariables[128];
};
struct AadSlotAttributes {
  unsigned short sequenceNumberAssigned;
  unsigned short sequenceAssignedDynamicBank;
  unsigned short playingStatus;
  unsigned short channelMute;
  unsigned char slotVolume;
  unsigned char slotPan;
  tp61 eventsInQueue[16];
};
struct NewMemTracker {
  struct MemHeader* rootNode;
  unsigned long totalMemory;
  unsigned long currentMemoryUsed;
  versionID lastMemoryAddress;
  long doingGarbageCollection;
};
struct SpuVoiceAttr {
  unsigned long voice;
  unsigned long mask;
  struct SpuVolume volume;
  struct SpuVolume volmode;
  struct SpuVolume volumex;
  unsigned short pitch;
  unsigned short note;
  unsigned short sample_note;
  signed short envx;
  unsigned long addr;
  unsigned long loop_addr;
  long a_mode;
  long s_mode;
  long r_mode;
  unsigned short ar;
  unsigned short dr;
  unsigned short sr;
  unsigned short rr;
  unsigned short sl;
  unsigned short adsr1;
  unsigned short adsr2;
};
struct POLY_G4 {
  unsigned long tag;
  unsigned char r0;
  unsigned char g0;
  unsigned char b0;
  unsigned char code;
  signed short x0;
  signed short y0;
  unsigned char r1;
  unsigned char g1;
  unsigned char b1;
  unsigned char pad1;
  signed short x1;
  signed short y1;
  unsigned char r2;
  unsigned char g2;
  unsigned char b2;
  unsigned char pad2;
  signed short x2;
  signed short y2;
  unsigned char r3;
  unsigned char g3;
  unsigned char b3;
  unsigned char pad3;
  signed short x3;
  signed short y3;
};
struct DR_AREA {
  unsigned long tag;
  unsigned long code[2];
};
struct evPositionData {
  signed short x;
  signed short y;
  signed short z;
  signed short pad;
};
struct STracker {
  struct _StreamUnit StreamList[16];
};
struct FaceExtents {
  long smallx;
  long bigx;
  long smally;
  long bigy;
  long smallz;
  long bigz;
};
struct WarpRoom {
  char name[16];
  struct _StreamUnit* streamUnit;
};
struct PlanningNode {
  struct _Position pos;
  unsigned short flags;
  unsigned long connectionStatus;
  unsigned long connections;
  unsigned short cost;
  unsigned short parent;
  unsigned short nodeType;
  unsigned short id;
  long streamUnitID;
};
struct VramBuffer {
  long flags;
  signed short x;
  signed short y;
  signed short w;
  signed short h;
  signed short yOffset;
  signed short lengthOfLeftOverData;
  tp19 lineOverFlow;
};
struct evObjectData {
  signed short x;
  signed short y;
  signed short PathNumber;
  signed short LinkNode;
  struct _Instance* Force;
  unsigned int rc;
};
struct evPhysicsSlideData {
  struct _SVector ForwardVector;
  struct _SVector ForwardNormal;
  struct _SVector DropNormal;
  signed short Segment;
  signed short DropOffset;
  signed short UpperOffset;
  signed short Height;
  struct _Instance* UpperInstance;
  unsigned int Dot;
};
struct evObjectThrowData {
  signed short type;
  signed short spinType;
  struct _SVector angularVel;
  unsigned short speed;
  signed short gravity;
  signed short initialXRot;
  signed short zVel;
};
struct evObjectBirthProjectileData {
  struct _Instance* instance;
  unsigned int joint;
  unsigned int type;
  struct _Instance* birthInstance;
};
struct PhysObWeaponProperties {
  struct PhysObProperties Properties;
  struct PhysObWeaponAttributes WeaponAttributes;
};
struct PhysObInteractProperties {
  struct PhysObProperties Properties;
  unsigned short conditions;
  unsigned short auxConditions;
  unsigned short action;
  unsigned short auxAction;
  unsigned char startAnim;
  unsigned char endAnim;
  unsigned char razielAnim;
  unsigned char razielAuxAnim;
  unsigned char frame;
  unsigned char startAnimMode;
  unsigned short distance;
  unsigned short newType;
  unsigned short newClass;
  unsigned short mode;
  unsigned short engageXYDistance;
  signed short engageZMinDelta;
  signed short engageZMaxDelta;
  unsigned char engageYCone;
  unsigned char engageZCone;
  unsigned short pad;
  struct PhysObWeaponAttributes* weapon;
};
struct __PhysObProjectileProperties {
  struct PhysObProperties Properties;
  long totalProjectiles;
  struct __PhysObProjectileData* data;
};
struct PhysObDraftProperties {
  struct PhysObProperties Properties;
  signed short force;
  unsigned short radius;
  unsigned short radiusCoef;
  signed short maxVelocity;
  unsigned long height;
};
struct PhysObSwitchProperties {
  struct PhysObProperties Properties;
  signed short Distance;
  signed short Class;
  unsigned char onAnim;
  unsigned char offAnim;
  unsigned char failedOnAnim;
  unsigned char enableAnim;
  unsigned char shutAnim;
  unsigned char onWalkTimer;
  unsigned char offWalkTimer;
  unsigned char walkMode;
  unsigned char razielOnAnim;
  unsigned char razielOffAnim;
  unsigned char razielFailedOnAnim;
  unsigned char razielEnableAnim;
  unsigned char startMode;
  unsigned char startAnim;
  unsigned short engageXYDistance;
  signed char engageZMinDelta;
  signed char engageZMaxDelta;
  unsigned char engageYCone;
  unsigned char engageZCone;
};
struct PhysObCollectibleProperties {
  struct PhysObProperties Properties;
  signed short collectClass;
  signed short collectValue;
  unsigned long distance;
  unsigned char idleAnim;
  unsigned char collectAnim;
  unsigned short spatialNode;
};
struct PhysObAnimatedProperties {
  struct PhysObProperties Properties;
  unsigned short flags;
  unsigned short pad;
};
struct PhysObData {
  long Mode;
  signed short xForce;
  signed short yForce;
  struct _Instance* Force;
  signed short LinkNode;
  signed short px;
  signed short py;
  signed short pz;
  signed short rx1;
  signed short ry1;
  signed short rz1;
  signed short Segment1;
  signed short rx2;
  signed short ry2;
  signed short rz2;
  signed short Segment2;
  signed short Steps;
  signed short Step;
  signed short PathNumber;
  signed short Pad1;
  struct _HInfo* RightCollision;
  struct _HInfo* LeftCollision;
  signed short burnAmpl;
  signed short throwFlags;
  signed short initialXRot;
  signed short xRotVel;
  signed short yRotVel;
  signed short zRotVel;
  struct _Instance* throwingInstance;
  unsigned int physObTimer;
};
struct SwitchData {
  signed short state;
  signed short accumulator;
};
struct BreakOffData {
  signed short NewType;
  signed short NewClass;
};
struct ProjectileData {
  unsigned int Type;
};
struct WaterLevelProcess {
  long flags;
  struct BSPTree* bspTree;
  struct _StreamUnit* streamUnit;
  signed short oldWaterZ;
  signed short oldGlobalOffset;
  signed short zValueFrom;
  signed short zValueTo;
  long maxSteps;
  long curStep;
};
struct EventInstanceObject {
  signed short id;
  signed short flags;
  long unitID;
  long introUniqueID;
  struct _Instance* instance;
};
struct EventEventObject {
  signed short id;
  signed short eventNumber;
  long unitID;
  struct Event* event;
};
struct EventTGroupObject {
  signed short id;
  signed short tgroupNumber;
  long unitID;
  struct BSPTree* bspTree;
  struct _StreamUnit* stream;
};
struct _PCodeStack {
  long topOfStack;
  struct StackType stack[32];
};
struct EventTimer {
  long flags;
  long time;
  struct Event* event;
  struct ScriptPCode* actionScript;
  tp19 scriptPos;
  struct Level* level;
  long nextEventIndex;
};
struct HintSystemStruct {
  signed short flags;
  signed short hintNumber;
  signed short stringNumber;
  long fadeTimer;
  long spawningUnitID;
};
struct LitShaftProperties {
  signed short fadeValue;
  signed short pad;
};
struct evPhysicsGravityData {
  signed short UpperOffset;
  signed short LowerOffset;
  signed short x;
  signed short y;
  signed short z;
  signed short slipSlope;
};
struct evPhysicsDropOffData {
  signed short xOffset;
  signed short yOffset;
  signed short DropOffset;
  signed short slipSlope;
};
struct evPhysicsEdgeData {
  signed short UpperOffset;
  signed short ForwardOffset;
  signed short AboveOffset;
  signed short XDistance;
  signed short YDistance;
  signed short ZDistance;
  struct _SVector* Normal1;
  struct _SVector* Normal2;
  struct _SVector* Delta;
  struct _Instance* instance;
  unsigned int zRot;
  unsigned int rc;
};
struct evPhysicsWallCrawlData {
  signed short Segment;
  signed short Length;
  signed short ForwardOffset;
  signed short NormalDistance;
  struct _SVector DropNormal;
  struct _SVector ForwardNormal;
  struct _Position NewPosition;
  struct _Rotation DropRotation;
  signed short ForwardXRotation;
  unsigned int rc;
};
struct evPhysicsSwimData {
  signed short CheckDepth;
  signed short SwimDepth;
  signed short WadeDepth;
  signed short TreadDepth;
  struct _SVector* iVelocity;
  signed short Depth;
  signed short WaterDepth;
  signed short rc;
  signed short pad;
  unsigned int WaterLevel;
};
struct evPhysicsDropHeightData {
  struct _Position origin;
  signed short mode;
  signed short DropOffset;
  signed short result;
  struct BSPTree* bsp;
  struct _TFace* tface;
};
struct evPhysicsLinkedMoveData {
  struct _Instance* instance;
  unsigned int segment;
  struct _SVector posDelta;
  struct _SVector rotDelta;
};
struct __CharacterState {
  struct _Instance* CharacterInstance;
  unsigned int TotalSections;
  struct __State SectionList[3];
};
struct evMonsterHitData {
  struct _Instance* sender;
  struct _Instance* lastHit;
  signed short knockBackDistance;
  signed short knockBackDuration;
  long power;
};
struct evMonsterThrownData {
  struct _Instance* sender;
  struct _Rotation direction;
  signed short power;
};
struct evMonsterAlarmData {
  struct _Instance* sender;
  struct _Position position;
  signed short type;
};
struct evMonsterSoulSuckData {
  struct _Instance* sender;
  struct _Position Destination;
};
struct evFXHitData {
  struct _SVector location;
  struct _SVector velocity;
  signed short amount;
  signed short type;
};
struct evAnimationControllerDoneData {
  struct _Instance* instance;
  long segment;
  long type;
  unsigned int data;
};
struct evMonsterImpaleData {
  struct _Instance* weapon;
  struct _Rotation direction;
  struct _Position position;
  signed short distance;
};
struct evObjectBreakOffData {
  struct _Instance* force;
  unsigned short node;
  signed short distance;
  unsigned short animation;
  unsigned short frame;
  unsigned short type;
  unsigned short action;
};
struct evObjectAbsorbData {
  struct _Instance* force;
  unsigned short node;
  unsigned short steps;
};
struct evObjectIdleData {
  long mode;
  struct _Instance* instance;
};
struct evControlInitHangData {
  struct _Instance* instance;
  unsigned int frame;
  unsigned int frames;
};
struct evControlInitIdleData {
  unsigned int mode;
  unsigned int frame;
  unsigned int frames;
};
struct evActionLookAroundData {
  tp19 rotx;
  tp19 rotz;
  signed short minx;
  signed short maxx;
  signed short minz;
  signed short maxz;
};
struct evActionPlayHostAnimationData {
  struct _Instance* instance;
  struct _Instance* host;
  unsigned int newAnim;
  unsigned int newFrame;
  unsigned int frames;
  unsigned int mode;
};
struct evShadowSegmentData {
  unsigned long totalShadowSegments;
  tp61 shadowSegments[4];
};
struct _MonsterAnim {
  unsigned short velocity;
  unsigned short distance;
  unsigned short playSpeed;
  unsigned char interpFrames;
  unsigned char startFrame;
  unsigned char interpOut;
  unsigned char alphaTable;
  unsigned char alphaTableOut;
  unsigned char controllingSection;
  char index[3];
  signed char pad;
};
struct _MonsterIdle {
  signed char anim;
  signed char alertMod;
  signed char probability;
  signed char pad;
};
struct _MonsterBehavior {
  signed char alertness;
  signed char idleFreq;
  signed char numIdles;
  char idleList[5];
};
struct _MonsterSenses {
  signed short sightArc;
  signed short sightRadius;
  signed short sightElevation;
  signed short soundArc;
  signed short soundRadius;
  signed short soundElevation;
  unsigned short scentRadius;
  signed short alarmRadius;
  unsigned short allyRadius;
};
struct _MonsterAllegiances {
  unsigned long enemies;
  unsigned long allies;
  unsigned long food;
  unsigned long gods;
};
struct _MonsterAttackAttributes {
  signed short attackRange;
  signed short attackHeight;
  signed short knockBackDistance;
  signed char knockBackDuration;
  signed char damage;
  signed char sphereSegment;
  signed char sphereOnFrame;
  signed char sphereOnAnim;
  signed char sphereOffFrame;
  signed char sphereOffAnim;
  signed char turnFrames;
  signed char numAnims;
  char attackProbability[12];
  char animList[5];
};
struct _MonsterMissile {
  unsigned short speed;
  unsigned short range;
  unsigned char frame;
  unsigned char anim;
  unsigned char segment;
  unsigned char damage;
  unsigned char type;
  unsigned char graphic;
  signed char gravity;
  signed char reload;
  signed char fireChance;
  unsigned char numAnims;
  char animList[2];
};
struct _MonsterCombatAttributes {
  signed short stunTime;
  signed short damageTime;
  signed short recovery;
  signed short surpriseTime;
  signed short grabTime;
  signed short combatRange;
  signed short surpriseRange;
  signed short allyRange;
  signed short enemyAttackRange;
  signed short suckPower;
  signed short suckRange;
  signed char hitPoints;
  signed char numAttacks;
  signed char missileAttack;
  signed char ambushAttack;
  char evadeProbability[12];
  char attackList[1];
};
struct _MonsterSubAttributes {
  versionID animList;
  struct _MonsterSenses* senses;
  struct _MonsterCombatAttributes* combatAttributes;
  struct _MonsterAllegiances* allegiances;
  versionID behaviorList;
  signed short scale;
  signed short fallDistance;
  signed short defAmbushRange;
  signed short fleeRange;
  signed short speedPivotTurn;
  signed short speedWalkTurn;
  signed short speedRunTurn;
  signed short speedFleeTurn;
  signed short forgetTime;
  unsigned char modelNum;
  unsigned char physAbility;
  unsigned char stunnable;
  unsigned char grabable;
  unsigned char numSections;
  void* sectionEnd[3];
  signed short defPlayerAttitude;
  signed short defWanderRange;
  signed short defGuardRange;
  unsigned char defInitialBehavior;
  unsigned char defTriggeredBehavior;
  signed char defActiveBehavior;
  unsigned char defSpectral;
  unsigned char sunVuln;
  unsigned char fireVuln;
  unsigned char waterVuln;
  unsigned char impaleVuln;
  unsigned char soundVuln;
  unsigned char weaponVuln;
  unsigned char missileVuln;
  signed short minSpikeRange;
  signed short maxSpikeRange;
  signed short maxSpikeAngle;
  signed short minSpikeHorzSpeed;
  signed short maxSpikeHorzSpeed;
  signed short maxSpikeVertSpeed;
  signed short upOnGroundOffset;
  signed short downOnGroundOffset;
};
struct _MonsterVars {
  unsigned long mvFlags;
  unsigned long auxFlags;
  struct __MessageQueue messageQueue;
  struct _MonsterIR* monsterIRList;
  struct _G2AnimInterpInfo_Type interpInfo[3];
  struct _MonsterAttackAttributes* attackType;
  struct _MonsterAnim* anim;
  va_list messageData;
  struct _MonsterIR* enemy;
  struct _MonsterIR* leader;
  struct _MonsterIR* ally;
  struct _Instance* held;
  long heldID;
  long soulID;
  va_list effect;
  unsigned long radarMap;
  unsigned long radarCounter;
  tp51 radarDistance[16];
  unsigned long mode;
  unsigned long damageTimer;
  unsigned long stunTimer;
  unsigned long generalTimer;
  unsigned long effectTimer;
  struct _Position* lookAtPos;
  struct _Position destination;
  signed short speed;
  struct _Position lastValidPos;
  struct _Position lookAtPosData;
  signed short fleeMarker;
  signed short wanderRange;
  signed short guardRange;
  signed short ambushRange;
  signed short ambushArc;
  signed short ambushElevation;
  signed short hitPoints;
  signed short maxHitPoints;
  signed short soulJuice;
  signed short regenTime;
  signed short mainColorVertex;
  signed short lookAngleX;
  signed short lookAngleZ;
  unsigned short avoidMask;
  unsigned short damageType;
  signed char ambushMarker;
  signed char ambushJumpType;
  unsigned char causeOfDeath;
  signed char previousMainState;
  unsigned char behaviorState;
  unsigned char initialBehavior;
  unsigned char triggeredBehavior;
  signed char activeBehavior;
  unsigned char age;
  signed char attackState;
  unsigned char ambient;
  signed char alertness;
  signed char alertCount;
  signed char senseIndex;
  signed char lastSideMove;
  signed char chance;
  signed char pathSlotID;
  struct _MonsterSubAttributes* subAttr;
  struct _MonsterIR* freeIRs;
  va_list extraVars;
  tp51 validUnits[10];
  tp51 patrolMarkers[12];
  tp19 currentMarker;
  long terrainImpaleID;
  signed short targetFade;
  signed short fadeRate;
};
struct _MonsterIR {
  struct _MonsterIR* next;
  struct _Instance* instance;
  long handle;
  struct _SVector relativePosition;
  signed short distance;
  unsigned short mirFlags;
  unsigned short mirConditions;
  unsigned long forgetTimer;
  unsigned long idleTime;
};
struct burntTuneType {
  unsigned int burntDist;
  unsigned int fadeDelta;
};
struct _MonsterState {
  voidFnPtr entryFunction;
  voidFnPtr stateFunction;
};
struct _MonsterStateChoice {
  unsigned int state;
  struct _MonsterState functions;
};
struct __GlyphData {
  voidFnPtr process;
  struct __MessageQueue messages;
  long selectedGlyph;
  signed short glyph_time;
  signed short glyph_radius;
  signed short glyph_scale;
  signed short glyph_rotation;
  signed short target_glyph_rotation;
  signed short glyph_movement;
};
struct __GlyphHudSaveData {
  signed short MANNA_Count;
  signed short HUD_Count;
};
struct _MonsterAttributes {
  unsigned long magicnum;
  va_list tunData;
  versionID auxAnimList;
  versionID ambientAnimList;
  long whatAmI;
  signed char numAuxAnims;
  signed char numAmbientAnims;
  unsigned char defaultAge;
  signed char pupateObject;
  unsigned char damageFXSegment;
  unsigned char headSegment;
  unsigned char neckSegment;
  unsigned char leftShoulderSegment;
  unsigned char rightShoulderSegment;
  unsigned char waistSegment;
  unsigned char leftKneeSegment;
  unsigned char rightKneeSegment;
  unsigned char leftFootSegment;
  unsigned char rightFootSegment;
  unsigned char spineSegment;
  unsigned char leftWeaponSegment;
  unsigned char rightWeaponSegment;
  unsigned char grabSegment;
  unsigned char bloodImpaleFrame;
  unsigned char bloodConeFrame;
  unsigned char bruiseRed;
  unsigned char bruiseGreen;
  unsigned char bruiseBlue;
  signed char numSubAttributes;
  signed char numCombatAttributes;
  signed char numAttackAttributes;
  signed char numMissiles;
  signed char numAnims;
  signed char numIdles;
  signed char numBehaviors;
  signed char numShatters;
  tp88 subAttributesList;
  tp88 combatAttributesList;
  struct _MonsterAttackAttributes* attackAttributesList;
  struct _MonsterMissile* missileList;
  struct _MonsterAnim* animList;
  struct _MonsterIdle* idleList;
  struct _MonsterBehavior* behaviorList;
  va_list shatterList;
};
struct _MonsterFunctionTable {
  voidFnPtr initFunc;
  voidFnPtr cleanUpFunc;
  voidFnPtr damageEffectFunc;
  tp159 queryFunc;
  voidFnPtr messageFunc;
  struct _MonsterStateChoice* stateFuncs;
  versionID versionID;
  versionID localVersionID;
};
struct _HunterVars {
  signed short startIdx;
  signed short endIdx;
  unsigned int rem_time;
  tp51 angles[16];
};
struct MissileGraphics {
  unsigned char object;
  unsigned char model;
};
struct evMonsterHitTerrainData {
  struct _Normal normal;
  signed short faceFlags;
};
struct evMonsterHitObjectData {
  struct _Instance* instance;
  unsigned int hitType;
};
struct _MonsterSaveInfo {
  long mvFlags;
  long auxFlags;
  signed short soulID;
  signed short soulJuice;
  signed char age;
  signed char state;
  signed char behaviorState;
  signed char anim;
  signed char causeOfDeath;
  signed char versionNumber;
};
struct evPhysicsLOSData {
  struct _Position destination;
  signed short arc;
  struct _Position origin;
  signed short flags;
  signed short result;
};
struct RadarInfo {
  signed short angle;
  signed short x;
  signed short y;
};
struct burntMessType {
  unsigned int closestvert;
  unsigned int closestdist;
  unsigned int closestseg;
  struct burntTuneType* burntTune;
};
struct bloodyMessType {
  unsigned int closestvert;
  unsigned int closestdist;
  unsigned int closestseg;
  unsigned int bloodiedAVert;
  unsigned int bloodIntensity;
};
struct _G2PoolMemPool_Type {
  unsigned short blockSize;
  unsigned short stackTop;
  unsigned short stackSize;
  void* stack;
  struct _G2PoolMem_Type* blockPool;
};
struct _walbossAttributes {
  unsigned char segmentToAttach;
  unsigned char frameToBirth;
  unsigned char frameToExpel;
  unsigned char maxEggHits;
  signed short maxAngle;
  signed short timeForHitAgony;
  signed short segmentForBodyTwist;
  signed short timeToThornPrep;
  signed short timeToThornPoke;
  signed short timeToEggThrob;
  signed short timeToEggExplode;
  signed short razielStunTime;
};
struct _G2AnimController_Type {
  unsigned short next;
  unsigned char type;
  unsigned char segNumber;
  va_list callbackData;
  unsigned short flags;
  signed short duration;
  signed short elapsedTime;
  struct _G2AnimAlphaTable_Type* alphaTable;
};
struct _G2AnimSegKeyflagInfo_Type {
  unsigned long* stream;
  unsigned long flags;
  unsigned int bitCount;
};
struct _G2AnimDecompressChannelInfo_Type {
  struct _G2AnimKeylist_Type* keylist;
  void* chanData;
  unsigned int storedKey;
  unsigned int targetKey;
};
struct _G2AnimSegValue_Type {
  struct _G2SVector3_Type scale;
  unsigned short pad;
  struct _G2SVector3_Type trans;
  unsigned short bIsQuat;
};
struct _G2AnimChanStatusBlockPool_Type {
  unsigned short blockSize;
  unsigned short stackTop;
  unsigned short stackSize;
  void* stack;
  struct _G2AnimChanStatusBlock_Type* blockPool;
};
struct _G2AnimControllerPool_Type {
  unsigned short blockSize;
  unsigned short stackTop;
  unsigned short stackSize;
  void* stack;
  struct _G2AnimController_Type* blockPool;
};
struct _G2AnimInterpStateBlockPool_Type {
  unsigned short blockSize;
  unsigned short stackTop;
  unsigned short stackSize;
  void* stack;
  struct _G2AnimInterpStateBlock_Type* blockPool;
};
struct _PlanCollideInfo {
  long StreamUnitID;
  struct _TFace* tFace;
  struct _Position collidePos;
};
struct PoolManagementData {
  signed char state;
  unsigned char numNodesInPool;
  struct _Position playerPosAtLastPlanMkrUpdate;
  struct PlanningNode* expansionNode1;
  struct PlanningNode* expansionNode2;
  tp221 distanceMatrix[32];
  unsigned short pairType;
  struct _Position peakPos;
  unsigned char currentNode;
  unsigned char currentBit;
};
struct EnemyPlanData {
  void* nodeSkipArray[8];
  void* nodeTypeArray[8];
  struct _Position wayPointArray[8];
  signed short goalUnitID;
  unsigned char numWayPoints;
};
struct _fth {
  signed char x;
  signed char y;
  signed char z;
  signed char nodeType;
};
struct _G2AppDataVM_Type {
  unsigned int argc;
  char * argv;
};
struct EnemyPlanSlotData {
  signed char slotInUse;
  signed char state;
  signed char wayPointBeingServoedTo;
  struct _Position startPos;
  struct _Position goalPos;
  struct _Position oldCurrentPos;
  struct EnemyPlanData planData;
  signed char targetType;
  signed short timer;
};
struct __Force {
  unsigned int Type;
  struct _Vector LinearForce;
  signed short Friction;
};
struct __AlarmData {
  signed short command;
  signed short data;
};
struct __Idle {
  unsigned char anim;
  unsigned char frame;
  unsigned char frames;
  unsigned char type;
};
struct __VAnim {
  unsigned char anim0;
  unsigned char anim1;
  unsigned char anim2;
  unsigned char frames;
  unsigned char mode;
  unsigned char alpha;
  unsigned short frame;
};
struct __SAnim {
  struct __VAnim* anim;
  struct __SAnim* nextAnim;
  signed short mode;
  signed short data;
  signed short speedAdjust;
  signed short pad;
};
struct __AttackItem {
  unsigned char anim;
  unsigned char framesIn;
  unsigned char alphaIn;
  unsigned char framesOut;
  unsigned char switchDelay;
  unsigned char ignoreDelay;
  unsigned char segmentToGlow;
  unsigned char startCollisionFrame;
  unsigned char handsToCollide;
  unsigned char endCollisionFrame;
  unsigned char ribbonStartFrame;
  unsigned char ribbonStartSegment;
  unsigned char ribbonEndSegment;
  unsigned char ribbonLifeTime;
  unsigned char ribbonFaceLifeTime;
  unsigned char knockBackFrames;
  unsigned char glowFadeInFrames;
  unsigned char glowFadeOutFrames;
  unsigned short ribbonStartOpacity;
  unsigned long ribbonStartColor;
  unsigned long ribbonEndColor;
  unsigned long glowColor;
  unsigned short knockBackDistance;
  unsigned short hitPowerScale;
};
struct __ThrowItem {
  unsigned char prepAnim;
  unsigned char prepAnimFramesIn;
  unsigned char prepAnimAlphaIn;
  unsigned char coilAnim;
  unsigned char coilAnimFramesIn;
  unsigned char coilAnimAlphaIn;
  unsigned char throwAnim;
  unsigned char throwAnimFramesInFactor;
  unsigned char throwFrameToLaunch;
  unsigned char framesOut;
  signed short launchPointX;
  signed short launchPointY;
  signed short launchPointZ;
  signed short maxXRotation;
  signed short minXRotation;
  signed short maxZRotation;
  signed short minZRotation;
  signed short velocity;
  signed short gravity;
  signed short coilRot;
  signed short pad;
};
struct __EngagedInstance {
  struct _Instance* instance;
  unsigned long distance;
};
struct __FitPoint {
  signed short x;
  signed short y;
};
struct __SensoryData {
  unsigned int Flags;
  struct _SVector ForwardNormal;
  struct _SVector AboveNormal;
  struct _SVector BelowNormal;
  struct _SVector BelowPoint;
  struct _SVector Delta;
  struct _Instance* HitMonster;
  struct _Instance* CurrentAutoFace;
  struct _Instance* LastAutoFace;
  struct __EngagedInstance* EngagedList;
  unsigned long EngagedMask;
  struct _Vector lookAtPoint;
  unsigned long heldClass;
};
struct __Player {
  unsigned int footPrint;
  struct __CharacterState State;
  unsigned int Mode;
  unsigned int Anim;
  unsigned int RotationSegment;
  struct _SVector iVelocity;
  unsigned int Magnitude;
  unsigned int input;
  unsigned int lastInput;
  unsigned int ZDirection;
  signed short Bearing;
  signed short LastBearing;
  unsigned int steeringMode;
  signed short steeringVelocity;
  signed short steeringAcceleration;
  unsigned int steeringLockRotation;
  signed short movementMinRate;
  signed short movementMaxRate;
  signed short movementMinAnalog;
  signed short movementMaxAnalog;
  struct __SensoryData Senses;
  struct _Instance* attachedPlatform;
  signed short dropOffHeight;
  signed short fallZVelocity;
  signed short HealthScale;
  signed short HealthBalls;
  unsigned int HitPoints;
  unsigned int DamageFrequency;
  unsigned int invincibleTimer;
  unsigned int Abilities;
  struct _Instance* GlyphSystem;
  unsigned short GlyphManaBalls;
  unsigned short GlyphManaMax;
  struct __FitPoint* constrictData;
  signed short constrictIndex;
  signed short constrictWaitIndex;
  struct _SVector constrictCenter;
  signed short constrictFlag;
  signed short constrictGoodCircle;
  unsigned long constrictXTotal;
  unsigned long constrictYTotal;
  struct _Instance* soulReaver;
  unsigned long currentSoulReaver;
  unsigned int CurrentPlane;
  unsigned int slipSlope;
  unsigned long idleCount;
  struct _Instance* idleInstance;
  struct __AttackItem* attack;
  unsigned int attackFlags;
  struct _Instance* attackCurrentHit;
  struct _Instance* attackLastHit;
  struct _FXGlowEffect* glowEffect;
  struct _Instance* attackedBy;
  struct __ThrowItem* throwData;
  unsigned int throwMode;
  struct _Position throwTarget;
  struct _Instance* throwInstance;
  signed short throwXRot;
  signed short throwZRot;
  voidFnPtr returnState;
  unsigned long passedMask;
  struct _G2SVector3_Type extraRot;
  unsigned int effectsFlags;
  signed short effectsFadeSource;
  signed short effectsFadeDest;
  unsigned int effectsFadeStep;
  unsigned int effectsFadeSteps;
  signed short autoFaceZone;
  signed short autoFaceAngle;
  unsigned int autoFaceLastRootAngle;
  unsigned int autoFaceRootAngle;
  unsigned int autoFaceTrueAngle;
  unsigned int autoFaceAnim;
  unsigned int autoFaceLastAnim;
  unsigned int nothingCounter;
  unsigned int timeAccumulator;
  struct _Position puppetMoveToPoint;
  struct _Position puppetRotToPoint;
  unsigned int soundModifier;
  signed short alarmTable;
  signed short terminator;
  signed short swimSpeedAdjustment;
  signed short swimTargetSpeed;
  unsigned long soundHandle;
  unsigned long soundTimer;
  unsigned long forcedGlideSpeed;
  struct _SVector collisionEdgeOffset;
  struct __SAnim* currentSAnim;
  unsigned long playerEvent;
  unsigned long playerEventHistory;
};
struct PlayerSaveData {
  unsigned long abilities;
  unsigned long currentPlane;
  unsigned long healthScale;
  unsigned long healthBalls;
  unsigned short manaBalls;
  unsigned short manaMax;
  unsigned long playerEventHistory;
};
struct RazielData {
  unsigned long version;
  unsigned long nonBurningRibbonStartColor;
  unsigned long nonBurningRibbonEndColor;
  tp344 idleList;
  tp344 attackList;
  tp88 throwList;
  struct __VAnim* virtualAnimations;
  struct __VAnim* virtualAnimSingle;
  tp88 stringAnimations;
  signed short throwFadeValue;
  signed short throwFadeInRate;
  unsigned int throwFadeOutRate;
  unsigned int throwManualDistance;
  signed short healthMaterialRate;
  signed short healthSpectralRate;
  signed short healthInvinciblePostHit;
  signed short healthInvinciblePostShunt;
  signed short forceMinPitch;
  signed short forceMaxPitch;
  signed short forceMinVolume;
  signed short forceMaxVolume;
  unsigned long forceRampTime;
  unsigned int SwimPhysicsFallDamping;
  unsigned int SwimPhysicsWaterFrequency;
  unsigned int SwimPhysicsWaterAmplitude;
  unsigned int SwimPhysicsUnderDeceleration;
  unsigned int SwimPhysicsUnderKickVelocity;
  unsigned int SwimPhysicsUnderKickAccel;
  unsigned int SwimPhysicsUnderVelocity;
  unsigned int SwimPhysicsUnderKickDecel;
  unsigned int SwimPhysicsUnderStealthAdjust;
  unsigned int SwimPhysicsCoilVelocity;
  unsigned int SwimPhysicsCoilDecelerationIn;
  unsigned int SwimPhysicsCoilDecelerationOut;
  unsigned int SwimPhysicsShotVelocity;
  unsigned int SwimPhysicsShotAccelerationIn;
  unsigned int SwimPhysicsShotAccelerationOut;
  unsigned int SwimPhysicsSurfVelocity;
  unsigned int SwimPhysicsSurfAccelerationIn;
  unsigned int SwimPhysicsSurfAccelerationOut;
  unsigned int SwimPhysicsSurfKickVelocity;
  unsigned int SwimPhysicsSurfKickAccel;
  unsigned int SwimPhysicsSurfMinRotation;
  unsigned int SwimPhysicsSurfMaxRotation;
  unsigned int SwimPhysicsSurfKickDecel;
};
struct __razController {
  unsigned short segment;
  unsigned short type;
};
struct DR_STP {
  unsigned long tag;
  unsigned long code[2];
};
struct UW_ScreenXY {
  signed short sx;
  signed short sy;
  signed short dx;
  signed short dy;
};
struct SavedInfoTracker {
  versionID MemoryCardBuffer;
  versionID InfoStart;
  versionID InfoEnd;
  versionID EndOfMemory;
};
struct SavedBasic {
  signed short savedID;
  signed short saveSize;
};
struct SavedLevel {
  signed short savedID;
  signed short saveSize;
  long areaID;
  signed short waterZ;
  signed short numberBSPTrees;
};
struct SavedDeadDeadBits {
  signed short savedID;
  signed short saveSize;
  char deadDeadBits[1024];
};
struct ActualSavedLevel {
  signed short savedID;
  signed short saveSize;
  long areaID;
  signed short waterZ;
  signed short numberBSPTrees;
  struct SavedBspTree bspTreeArray[1];
};
struct _GlobalSaveTracker {
  signed short savedID;
  signed short saveSize;
  signed short flags;
  unsigned long currentTime;
  signed short humanOpinionOfRaziel;
  signed char numRegens;
  struct _MONAPI_Regenerator regenEntries[10];
  struct gSoundData sound;
  long sizeUsedInBlock;
};
struct CdlFILTER {
  unsigned char file;
  unsigned char chan;
  unsigned short pad;
};
struct SpuCommonAttr {
  unsigned long mask;
  struct SpuVolume mvol;
  struct SpuVolume mvolmode;
  struct SpuVolume mvolx;
  struct SpuExtAttr cd;
  struct SpuExtAttr ext;
};
struct XAVoiceListEntry {
  unsigned short length;
};
struct XAVoiceTracker {
  struct CdlLOC currentPos;
  unsigned int currentSector;
  unsigned int endSector;
  voidFnPtr prevCallback;
  void* cdResult[8];
  struct CdCommand cdCmdQueue[8];
  tp61 requestQueue[4];
  struct VoiceCommand voiceCmdQueue[16];
  unsigned char cdCmdIn;
  unsigned char cdCmdOut;
  unsigned char cdCmdsQueued;
  unsigned char reqIn;
  uncsigned char reqOut;
  unsigned char reqsQueued;
  unsigned char voiceCmdIn;
  unsigned char voiceCmdOut;
  unsigned char voiceCmdsQueued;
  unsigned char unused1;
  unsigned char voiceStatus;
  unsigned char cdStatus;
  signed short fileNum;
  signed short unused2;
  struct XAFileInfo xaFileInfo[30];
};
struct cinema_fn_table_t {
  intFnPtr play;
  versionID versionID;
};
struct LocalizationHeader {
  tp10 language;
  unsigned int numXAfiles;
  unsigned int XATableOffset;
  unsigned int numStrings;
};
struct menu_t {
  unsigned int nmenus;
  unsigned int nitems;
  unsigned int nbytes;
  struct menu_stack_t stack[5];
  struct menu_item_t items[12];
  char bytes[512];
  voidFnPtr drawfn;
  va_list opaque;
};
struct menu_format_t {
  unsigned int xpos;
  unsigned int ypos;
  unsigned int lineskip;
  unsigned int itemskip;
  unsigned int width;
  unsigned int center;
  unsigned int border;
};
struct menu_stack_t {
  intFnPtr fn;
  unsigned int index;
  struct menu_format_t format;
};
struct menu_item_t {
  versionID text;
  intFnPtr fn;
  long parameter;
  long flags;
};
struct Extents2d {
  unsigned int xmin;
  unsigned int xmax;
  unsigned int ymin;
  unsigned int ymax;
};
struct menu_sound_entry_t {
  tp10 sound;
  unsigned int sfx;
};
struct menuface_t {
  unsigned int x;
  unsigned int y;
  unsigned int w;
  unsigned int h;
  unsigned int loaded;
};
struct mcmenu_table_t {
  intFnPtr data_size;
  voidFnPtr initialize;
  voidFnPtr terminate;
  voidFnPtr begin;
  voidFnPtr end;
  intFnPtr set_buffer;
  intFnPtr main;
  intFnPtr pause;
  versionID versionID;
};
struct memcard_t {
  struct Object* object;
  struct mcmenu_table_t* table;
  struct mcmenu_t* mcmenu;
  signed short running;
  signed short wrongVerison;
  struct GameTracker* gt;
};
